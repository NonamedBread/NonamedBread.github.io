I"l/<h1 id="1-소프트웨어-생명-주기">1. 소프트웨어 생명 주기</h1>

<h2 id="소프트웨어-생명-주기software-life-cycle">소프트웨어 생명 주기(Software Life Cycle)</h2>
<ul>
  <li>
    <p>소프트웨어를 개발하기 위한 과정을 각 단계별로 나눈 것</p>
  </li>
  <li>
    <p>대표 모형</p>
    <ul>
      <li>폭포수 모형</li>
      <li>프로토타입 모형</li>
      <li>나선형 모형</li>
      <li>애자일 모형</li>
    </ul>
  </li>
</ul>

<h2 id="폭포수-모형waterfall-model-원형-모형">폭포수 모형(Waterfall Model, 원형 모형)</h2>
<ul>
  <li>각 단계를 확실히 매듭짓고 다음 단계를 진행하는 개발 방법론
    <blockquote>
      <p>전통적인 소프트웨어 생명 주기 모형</p>
    </blockquote>
  </li>
</ul>

<h2 id="프로토타입-모형prototype-model-원형-모형">프로토타입 모형(Prototype Model, 원형 모형)</h2>
<ul>
  <li>견본품(Prototype)을 만들어 최종 결과물을 예측하는 모형</li>
</ul>

<h2 id="나선형-모형spiral-model-점진적-모형">나선형 모형(Spiral Model, 점진적 모형)</h2>
<ul>
  <li>여러 번의 소프트웨어 개발 과정을 거쳐 점진적으로 개발하는 모형</li>
</ul>

<p><strong>4가지 주요 활동</strong></p>

<blockquote>
  <p>계획 수립 -&gt; 위험 분석 -&gt; 개발 및 검증 -&gt; 고객 평가 <strong>(계위개고)</strong></p>
</blockquote>

<h2 id="애자일-모형agile-model">애자일 모형(Agile Model)</h2>

<ul>
  <li>
    <p>요구사항 변화에 유연하게 대응할 수 있도록 일정한 주기를 반복하면서 개발하는 모형</p>
  </li>
  <li>
    <p><strong><em>폭포수 모형과 대조적</em></strong></p>
  </li>
  <li>
    <p><strong>대표 모형</strong></p>
    <ul>
      <li>스크럼(Scrum)</li>
      <li>XP(eXtreme Programming)</li>
      <li>칸반(Kanban)</li>
      <li>Lean</li>
      <li>기능 중심 개발(FDD;Feature Driven Development)</li>
    </ul>
  </li>
</ul>

<h2 id="애자일-개발-4가지-핵심-가치">애자일 개발 4가지 핵심 가치</h2>
<ul>
  <li>프로세스와 도구보다는 개인과 상호작용에 더 가치를 둔다.</li>
  <li>방대한 문서보다는 실행되는 SW에 더 가치를 둔다.</li>
  <li>계약 협상보다는 고객과 협업에 더 가치를 둔다.</li>
  <li>계획을 따르기 보다는 변화에 반응하는 것에 더 가치를 둔다.</li>
</ul>

<h2 id="소프트웨어-공학">소프트웨어 공학</h2>
<ul>
  <li>소프트웨어의 위기를 극복하기 위한 방안으로 연구된 학문</li>
  <li>소프웨어 공학의 기본 원칙
    <ul>
      <li>현대적인 프로그래밍 기술을 계속적으로 적용해야 한다.</li>
      <li>개발된 소프트웨어의 품질이 유지되도록 지속적으로 검증해야 한다.</li>
      <li>소프트웨어 개발 관련 사항 및 결과에 대한 명확한 기록을 유지해야 한다.</li>
    </ul>
  </li>
</ul>

<h1 id="2-스크럼scrum-기법">2. 스크럼(Scrum) 기법</h1>

<h2 id="스크럼scrum">스크럼(Scrum)</h2>
<p>팀이 중심이 되어 개발의 효율성을 높이는 기법</p>

<h2 id="스크럼-팀">스크럼 팀</h2>

<table>
  <thead>
    <tr>
      <th>구성원</th>
      <th>역할</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>제품 책임자(PO;Product Owner)</td>
      <td>백로그(Backlog)를 작성<br /> 이해도가 높고, 의사를 결정할 사람</td>
    </tr>
    <tr>
      <td>스크럼 마스터(SM;Scrum Master)</td>
      <td>가이드 역할</td>
    </tr>
    <tr>
      <td>개발팀(DT;Development Team)</td>
      <td>제품 개발을 수행</td>
    </tr>
  </tbody>
</table>

<h2 id="스크럼-개발-프로세스">스크럼 개발 프로세스</h2>

<table>
  <thead>
    <tr>
      <th>프로세스</th>
      <th>내용</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>스프린트 계획 회의(Springt Planning Meeting)</td>
      <td>제품 백로그 중 이번 스프린트에서 수행할 작업을 대상으로 단기 일정을 수립하는 회의</td>
    </tr>
    <tr>
      <td>스프린트(Sprint)</td>
      <td>실제 개발 작업을 진행하는 과정, 2~4주 정도</td>
    </tr>
    <tr>
      <td>일일 스크럼 회의(Daily Scrum Meeting)</td>
      <td>모든 팀원이 약속된 시간에 약 15분 동안 진행 상황을 점검하는 회의&lt;/br&gt;남은 작업 시간은 소멸 차드(Burn-down Chart)에 표시</td>
    </tr>
    <tr>
      <td>스프린트 검토 회의(Sprint Review)</td>
      <td>요구사항에 잘 부합하는지 테스팅</td>
    </tr>
    <tr>
      <td>스프린트 회고(Sprint Retrospective)</td>
      <td>규칙 준수 여부 및 개선할 점을 확인하고 기록</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>계획 -&gt; 진행(스프린트) -&gt; 회의, 검토 -&gt; 회고 순으로 진행</p>
</blockquote>

<h1 id="3-xpextreme-programming-기법">3. XP(eXtreme Programming) 기법</h1>

<h2 id="xpextreme-programming">xp(eXtreme Programming)</h2>

<ul>
  <li>
    <p>요구사항에 유연하게 대응하기 위해 고객의 참여와 개발 과정의 반복을 극대화 하여 생산성을 향상시키는 방법</p>
  </li>
  <li>
    <p>XP의 5가지 핵심 가치 (암기)</p>
    <ul>
      <li>의사소통(Cmmunication)</li>
      <li>단순성(Simplicity)</li>
      <li>용기(Courage)</li>
      <li>존중(Respect)</li>
      <li>피드백(Feedback)
        <blockquote>
          <p>용단의피존</p>
          <h2 id="xp-개발-프로세스">xp 개발 프로세스</h2>
          <p>|프로세스|내용|
|—|—|
|릴리즈 계획 수립<br />(Release Planning)|부분 혹은 전체 개발 완료 시점에 대한 일정을 수립<br />몇개의 스토리가 적용되어 부분적으로 기능이 완료된 제품을 제공하는 것을 릴리즈라고 함|
|이터레이션<br />(Iteration, 주기)|실제 개발 작업을 진행하는 과정으로, 보통 1~3주 정도의 기간으로 진행됨|
|승인 검사<br />(Acceptance Test, 인수 테스트)|하나의 이터레이션 안에서 부분 완료 제품이 구현되면 수행하는 테스트|
|소규모 릴리즈<br />(Small Release)|요구사항에 유연하게 대응할 수 있도록 릴리즈의 규모를 축소 한 것|</p>
        </blockquote>
      </li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>계획하고 진행한 후 검사하고 출시한다 (진행 -&gt; 이터레이션, 출시 -&gt; 릴리즈)</p>
</blockquote>

<h2 id="xp의-주요-실천-방법practice">xp의 주요 실천 방법(Practice)</h2>

<table>
  <thead>
    <tr>
      <th>실천 방법</th>
      <th>내용</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Pair Programming&lt;div&gt;(짝 프로그래밍)</td>
      <td>다른 사람과 함께 프로그래밍을 수행함으로써 개발에 대한 책임을 공동으로 나눠 갖는 환경을 조성</td>
    </tr>
    <tr>
      <td>Collective Ownership&lt;div&gt;(공동 코드 소유)</td>
      <td>개발 코드에 대한 권한과 책임을 공동으로 소유</td>
    </tr>
    <tr>
      <td>Test-Driven Development&lt;div&gt;(테스트 주도 개발)</td>
      <td>개발자가 실제 코드를 작</td>
    </tr>
    <tr>
      <td>Whole Team&lt;div&gt;(전체 팀)</td>
      <td>개발에 참여하는 모든 구성원(고객 포함)들은 각자 자신의&lt;div&gt;역할이 있고 그 역할에 대한 책임을 가져야 함</td>
    </tr>
    <tr>
      <td>Continuous Integration&lt;div&gt;(계속적인 통합)</td>
      <td>모듈 단위로 나눠서 개발된 코드들은 하나의 작업이 마무리 될 때마다 지속적으로 통합됨</td>
    </tr>
    <tr>
      <td>Refactoring(리팩토링)</td>
      <td>프로그램 기능의 변경 없이 시스템을 재구성함&lt;div&gt;목적 : 프로그램을 쉽게 이해하고 쉽게 수정하여 빠르게 개발할 수 있도록 하기 위함</td>
    </tr>
    <tr>
      <td>Small Release(소규모 릴리즈)</td>
      <td>릴리즈 기간을 짧게 반복함으로써 고객의 요구 변화에 신속히 대응할 수 있음</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>주요 실천 방법은 영문으로도 알고 있어야 함</p>
</blockquote>

<h1 id="4-현행-시스템-파악">4. 현행 시스템 파악</h1>

<table>
  <tr>
    <td>프로세스</td>
    <td>현행 시스템</td>
    <td>내용</td>
  </tr>
  <tr>
    <td rowspan="3">1단계</td>
    <td> 시스템 구성 파악</td>
    <td>조직의 주요 업무를 담당하는 기간 업무와 이를 지원하는 지원 업무로 구분하여 기술</td>
  </tr>
   <tr>
    <td>시스템 기능 파악</td>
    <td>현재 제공하는 기능들을 주요 기능과 하부 기능, 세부 기능으로 구분하여 계층형으로 표시함</td>
  </tr>
  <tr>
    <td>시스템 인터페이스 파악</td>
    <td>단위 업무 시스템 간에 주고받는 데이터의 종류, 형식, 프로토콜, 연계 유형, 주기 등을 명시함</td>
  </tr>
   <tr>
    <td rowspan="2">2단계</td>
    <td>아키텍처 구성 파악</td>
    <td>최상위 수준에서 계층별로 표현한 아키텍처 구성도를 작성함</td>
  </tr>
  <tr>
    <td>소프트웨어 구성 파악</td>
    <td>소프트웨어들의 제품명, 용도, 라이선스 적용 방식, 라이선스 수 등을 명시함</td>
  </tr>
   <tr>
    <td rowspan="2">3단계</td>
    <td>하드웨어 구성 파악</td>
    <td>단위 업무 시스템들이 운용되는 서버의 주요 사양 과 수량, 그리고 서버의 이중화 적용 여부를 명시함</td>
  </tr>
     <tr>
    <td>네트워크 구성 파악</td>
    <td>서버의 위치, 서버 간의 네트워크 연결 방식을 네트워크 구성도로 작성함</td>
  </tr>
</table>
<blockquote>
  <p>시스템의 개발 범위를 명확히 설정하려면 현행 시스텡이 어떻게 구성되어 있는지 파악해야 됨</p>
</blockquote>

<p># 5. 개발 기술 환경 파악</p>
<blockquote>
  <p>요구사항 식별 시 고려사항 암기</p>
</blockquote>

<p>## 개발 기술 환경 파악의 개요
  개발 하고자 하는 소프트웨어와 관련된 운영체제(OS), 데이터베이스 관리 시스템(DBMS), 미들웨어 등을 선정할 때 고려해야 하 할 사항을 기술하고, 오픈 소스를 사용할 때 주의해야 할 내용을 제시</p>

<p>## 운영체제(OS , Operating System)</p>
<ul>
  <li>컴퓨터 시스템의 자원을 효율적으로 관리하며, 컴퓨터를 효율적으로 사용할 수 있도록 환경을 제공하는 소프트웨어</li>
  <li>운영체제 관련 요구사항 식별 시 고려사항
    <ul>
      <li>가용성</li>
      <li>성능</li>
      <li>기술 지원</li>
      <li>주변 기기</li>
      <li>구축 비용</li>
    </ul>
  </li>
</ul>

<p>## 데이터베이스 관리 시스템(DBMS; DataBase Mangement System)</p>
<ul>
  <li>
    <p>사용자와 데이터베이스 사이에서 사용자의 요구에 따라 정보를 생성해 주고, 데이터베이스를 관리해 주는 소프트웨어</p>
  </li>
  <li>
    <p>DBMS 관련 요구사항 식별 시 고려사항</p>
    <ul>
      <li>가용성</li>
      <li>성능</li>
      <li>기술 지원</li>
      <li>상호 호환성</li>
      <li>구축 비용</li>
    </ul>
  </li>
</ul>

<p>## 웹 애플리케이션 서버(WAS; Web Application Server)</p>

<ul>
  <li>
    <p>사용자의 요구에 따라 변하는 동적인 콘텐츠를 처리하기 위해 사용되는 미들웨어</p>
  </li>
  <li>
    <p>웹 애플리케이션 서버 관련 요구사항 식별 시 고려사항
    - 가용성
    - 성능
    - 기술 지원
    - 구축 비용</p>
  </li>
</ul>

<p>## 오픈 소스 (Open Source)</p>

<ul>
  <li>누구나 별다른 제한 없이 사용할 수 있도록 소스 코드를 공개한 소프트웨어</li>
  <li>웹 애플리케이션 서버 관련 요구사항 식별 시 고려사항
    - 라이선스의 종류
    - 사용자 수
    - 기술의 지속 가능성</li>
</ul>

:ET