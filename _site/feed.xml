<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-04-21T23:47:26+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">NonamedBread</title><subtitle>An amazing website.</subtitle><author><name>Lee Kyuhwan</name></author><entry><title type="html">정처기 실기 요구사항 확인 14~</title><link href="http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B803/" rel="alternate" type="text/html" title="정처기 실기 요구사항 확인 14~" /><published>2022-04-19T00:00:00+09:00</published><updated>2022-04-19T00:00:00+09:00</updated><id>http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B803</id><content type="html" xml:base="http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B803/"><![CDATA[<h1 id="14활동activity-다이어그램">14.활동(Activity) 다이어그램</h1>

<ul>
  <li>
    <p>자료 흐릅도(DFD, Data Flow Diagram)와 유사</p>
  </li>
  <li>
    <p>시스템이 어떤 기능을 수행하는지 객체의 처리 로직이나 조건에 따른 처리의 흐름을 순서에 따라 표현한 것</p>
  </li>
  <li>
    <p>유스케이스 안에서 혹은 유스케이스 사이의 복잡한 처리의 흐름을 표현</p>
  </li>
</ul>

<h2 id="활동activity-다이어그램-구성-요소">활동(Activity) 다이어그램 구성 요소</h2>

<table>
  <tr>
    <th>
      구성요소
    </th>
    <th>
      표현 방법
    </th>
    <th>
    내용
    </th>
  </tr>
  <tr>
    <td>
      액션(Action) / 액티비티(Activity)
    </td>
    <td>
     액션
     <image src="https://user-images.githubusercontent.com/93482597/163842008-e7bcb2e6-ed40-41a9-9729-547c839e7f4e.png" />
     액티비티
     <image src="https://user-images.githubusercontent.com/93482597/163842165-f2abf7d7-185b-4d9f-be98-3e12100087c9.png" />
    </td>
    <td>
      액션 : 더 이상 분해할 수 없는 단일 작업<br />액티비티 : 몇 개의 액션으로 분리될 수 있는 작업
    </td>
  </tr>
  <tr>
    <td>
    시작노드
    </td>
    <td>
      <image src="https://user-images.githubusercontent.com/93482597/163842710-a9fe1c28-b987-425d-9c6e-136a68add711.png" />
    </td>
    <td>
      액션이나 액티비티가 시작됨을 표현한 것
    </td>
  </tr>
  <tr>
    <td>
      종료 노드
    </td>
    <td>
      <image src="https://user-images.githubusercontent.com/93482597/163842454-5826ff6e-54f4-45a6-9d59-7288fa5aa603.png" />
    </td>
    <td>
     액티비티 안의 모든 흐름이 종료됨을 표현
    </td>
  </tr>
  <tr>
    <td>
      조건(판단) 노드
    </td>
    <td>
      <image src="https://user-images.githubusercontent.com/93482597/163842939-86d69c88-7c64-45a9-91b9-5fec8a31799f.png" />
    </td>
    <td>
      조건에 따라 제어의 흐름이 분리됨을 표현
    </td>
  </tr>
  <tr>
    <td>
    병합 노드
    </td>
    <td>
      <image src="https://user-images.githubusercontent.com/93482597/163843327-29febc2d-e0d5-4d54-9d42-b908f818746a.png" />
    </td>
    <td>
      여러 경로의 흐름이 하나로 합쳐짐을 표현
    </td>
  </tr>
  <tr>
    <td>
     포크(Fork) 노드
    </td>
    <td>
    <image src="https://user-images.githubusercontent.com/93482597/163843596-04e31644-56f3-4276-a148-a95f6ab0cc54.png" />
    </td>
    <td>
    액티비티의 흐름이 분리되어 수행됨을 표현
    </td>
  </tr>
  <tr>
    <td>
    조인(Join) 노드
    </td>
    <td>
    <image src="https://user-images.githubusercontent.com/93482597/163843736-4de59faf-0dab-4ae7-b5bc-3529399271c1.png" />
    </td>
    <td>
      분리되어 수행되던 액티비티의 흐름이 다시 합쳐짐을 표현
    </td>
  </tr>
  <tr>
    <td>
      스윔레인(Swim Lane)
    </td>
    <td>
      <image src="https://user-images.githubusercontent.com/93482597/163846448-bce172e2-f785-436e-8e30-420b954c8a8e.png" />
    </td>
    <td>
     액티비티 수행을 담당하는 주체를 구분하는 선<br />가로 또는 세로 실선을 그어 구분
    </td>
  </tr>
</table>

<h1 id="15-클래스class-다이어그램">15. 클래스(Class) 다이어그램</h1>

<h2 id="클래스-다이어그램">클래스 다이어그램</h2>

<ul>
  <li>시스템을 구성하는 요소에 대해 이해할 수 있는 구조적 다이어그램</li>
  <li>시스템을 구성하는 요소를 문서화 하는데 사용</li>
  <li>코딩에 필요한 객체의 속성, 함수 등의 정보를 잘 표현하고 있어 시스템을 모델링하는 데자주 사용</li>
  <li>
    <p>클래스, 제약조건, 관계 등으로 구성</p>
  </li>
  <li>클래스 다이어그램은 UML 다이어그램 중 객체(Object)들을 클래스로 추상화하여 표현하는 다이어그램으로 대표적인 구조적 다이어그램이다.</li>
  <li>클래스는 각각의 객체들이 갖는 속성과 메소드를 표현한 것으로 3개의 구획으로 나눠 이름, 속성, 메소드를 표기한다.</li>
</ul>

<h2 id="연관-클래스">연관 클래스</h2>

<ul>
  <li>연관 관계에 있는 두 클래스에 추가적으로 표현해야 할 속성이나 오퍼레이션이 있는 경우 생성하는 클래스</li>
  <li>두 클래스의 연관 관계를 나타내는 선의 가운데로부터 점선을 연관클래스로 이어 표시</li>
  <li>연관클래스의 이름은 연관 관계의 이름을 이용해 지정</li>
</ul>

<h1 id="16-시퀀스sequence-다이어그램">16. 시퀀스(Sequence) 다이어그램</h1>

<h2 id="구성-요소">구성 요소</h2>

<ul>
  <li>액터(Actor) : 시스템으로부터 서비스를 요청하는 외부 요소로, 사람이나 외부 시스템을 의미</li>
  <li>객체(Object)  : 메시지를 주고받는 주체</li>
  <li>생명선(Lifeline) : 객체가 메모리에 존재하는 기간으로, 객체 아래쪽에 점선을 그어 표현// 객체 소멸이 표시된 기간까지 존재</li>
  <li>실행 상자(Active Box, 활성 상자) : 객체가 메시지를 주고 받으며 구동되고 있음을 표현</li>
  <li>메시지(Message) : 객체가 상호 작용을 위해 주고받는 메시지</li>
  <li>객체 소멸 : 해당 객체가 더이상 메모리에 존재하지 않음을 표현</li>
  <li>프레임(Frame) : 다이어그램의 전체 또는 일부를 묶어 표현</li>
</ul>

<h2 id="특징">특징</h2>

<ul>
  <li>시스텡이나 객체들이 메시지를 주고받으며 상호 작용하는 과정을 그림으로 표현</li>
</ul>

<h1 id="17-커뮤니케이션communication-다이어그램">17. 커뮤니케이션(Communication) 다이어그램</h1>

<h2 id="특징-1">특징</h2>

<ul>
  <li>시스템이나 객체들이 메시지를 주고 받으며 시간의 흐름에 따라 상호 작용하는 과정을 액터, 객체, 링크, 메시지 등의 요소를 사용하여 그림으로 표현</li>
  <li>동작에 참여하는 객체들 사이의 간계를 파악하는데 사용</li>
</ul>

<h2 id="구성-요소-1">구성 요소</h2>
<ul>
  <li>액터(ACtor) : 시스템으로부터 서비스를 요청하는 외부 요소로, 사람이나 외부 시스템을 의미</li>
  <li>객체(Object) : 메시지를 주고받는 주체</li>
  <li>링크(Link) : 객체들 간의 관계를 표현한 것 // 액터와 객체, 객체와 객체 간에 실선을 그어 표현</li>
  <li>메시지(Message) : 객체가 상호 작용을 위해 주고받는 내용 //  화살표의 방향은 메시지를 받는 쪽으로 향하게 표현 // 일정한 순서에 의해 처리되는 메시지의 경우 숫자로 순서를 표시</li>
</ul>

<h1 id="18-상태state-다이어그램">18. 상태(State) 다이어그램</h1>

<h2 id="특징-2">특징</h2>
<ul>
  <li>객체들 사이에 발생하는 이벤트에 의한 객체들의 상태 변화를 그림으로 표현</li>
  <li>객체의 상태란 객체가 갖는 속성 값의 변화를 의미</li>
  <li>특정 객체가 어떤 이벤트에 의해 상태 변환 과정이 진행되는지 확인</li>
</ul>

<h1 id="19-패키지package-다이어그램">19. 패키지(Package) 다이어그램</h1>

<h2 id="특징-3">특징</h2>
<ul>
  <li>요소들을 그룹화한 패키지간의 의존 관계를 표현</li>
  <li>패키지는 또 다른 패키지의 요소가 될 수 있다.</li>
  <li>대규모 시스템에서 주요 요소 간의 종속성을 파악하는데 사용</li>
</ul>

<h1 id="20-소프트웨어-개발-방법론">20 소프트웨어 개발 방법론</h1>

<h2 id="컴포넌트-기반cbd-component-based-design-방법론">컴포넌트 기반(CBD; Component Based Design) 방법론</h2>

<ul>
  <li>
    <p>기존의 시스템이나 소프트웨어를 구성하는 컴포넌트를 조합하여 하나의 새로운 애플리케이션을 만드는 방법론</p>
  </li>
  <li>
    <p>특징</p>
    <ul>
      <li>개발 기간 단축으로 인한 생산성 향상</li>
      <li>새로운 기능 추가가 쉬운 확장성</li>
      <li>소프트웨어 재사용이 가능</li>
    </ul>
  </li>
</ul>

<h2 id="구조적-방법론">구조적 방법론</h2>

<ul>
  <li>
    <p>사용자 요구사항을 파악하요 문서화하는 처리(Process) 중심의 방법론</p>
  </li>
  <li>
    <p>구조적 방법론의 개발 절차</p>
    <ul>
      <li>타당성 검토 단계 -&gt; 계획 단계 -&gt; 요구사항 단계 -&gt; 설계 단계 -&gt; 구현 단계 -&gt; 시험 단계 -&gt; 운용/유지보수 단계</li>
    </ul>
  </li>
</ul>

<h2 id="정보공학-방법론">정보공학 방법론</h2>

<ul>
  <li>
    <p>계획, 분석, 설계, 구축에 정형화된 기법들을 상호 연관성 있게 통합 및 적용하는 자료(Data) 중심의 방법론</p>
  </li>
  <li>
    <p>개발절차</p>
    <ul>
      <li>정보 전략 계획 수립 단계 -&gt; 업무 영역 분석 단계 -&gt; 업무 시스템 설계 단계 -&gt; 업무 시스템 구축 단계</li>
    </ul>
  </li>
</ul>

<h2 id="객체-지향-방법론">객체 지향 방법론</h2>

<ul>
  <li>
    <p>객체들을 조립해서 필요한 소프트웨어를 구현하는 방법론</p>
  </li>
  <li>
    <p>개발 절차</p>
    <ul>
      <li>요구 분석 단계 -&gt; 설계 단계 -&gt; 구현 단계 -&gt; 테스트 및 검증 단계 -&gt; 인도 단계</li>
    </ul>
  </li>
</ul>

<h1 id="21-sw-공학의-발전적-추세">21. S/W 공학의 발전적 추세</h1>

<h2 id="소프트웨어-재사용software-reuse">소프트웨어 재사용(Software Reuse)</h2>
<ul>
  <li>이미 개발되어 인정받은 소프트웨어를 다른 소프트웨어 개발이나 유지에 사용</li>
</ul>

<h3 id="소프트웨어-재사용-방법">소프트웨어 재사용 방법</h3>

<ul>
  <li>
    <p>합성 중심(Composition-Based) : 전자 칩과 같은 소프트웨어 부품, 즉 블록을 만들어서 끼워 맞춰 소프트웨어를 완성시키는 방법, 블록 구성 방법이라고도 함</p>
  </li>
  <li>
    <p>생성 중심(Generation-Based) : 추상화 형태로 써진 명세를 구체화하여 프로그램을 만드는 방법으로, 패턴 구성 방법이라고도 함</p>
  </li>
</ul>

<h2 id="소프트웨어-재공학software-reengineering">소프트웨어 재공학(Software Reengineering)</h2>
<ul>
  <li>기존 시스템을 이용하여 보다 나은 시스템을 구축하고, 새로운 기능을 추가하여 소프트웨어 성능을 향상 시키는 것</li>
</ul>

<h3 id="이점">이점</h3>
<ul>
  <li>소프트웨어의 품질 향상</li>
  <li>생산성 증가</li>
  <li>수명 연장</li>
  <li>오류 감소</li>
</ul>

<h2 id="casecomputer-aided-software-engineering">CASE(Computer Aided Software Engineering)</h2>

<ul>
  <li>소프트웨어 개발 과정에서 사용되는 요구분석, 설계, 구현, 검사 및 디버깅 과정 전체 또는 일부를 컴퓨터와 전용 소프트웨어 도구를 사용하여 자동화 하는 것</li>
</ul>

<h3 id="주요-기능">주요 기능</h3>
<ul>
  <li>소프트웨어 생명 주기 전 단계의 연결</li>
  <li>다양한 소프트웨어 개발 모형 지원</li>
  <li>그래픽 지원</li>
</ul>

<h1 id="22-비용-산정-기법">22. 비용 산정 기법</h1>

<h2 id="소프트웨어-비용-산정">소프트웨어 비용 산정</h2>

<ul>
  <li>소프트웨어 비용 산정은 개발에 소요되는 인원, 자원, 기간 등으로 소프트웨어의 규모를 확인하여 개발 계획 수립에 필요한 비용을 산정하는 것</li>
</ul>

<h2 id="소프트웨어-비용-결정-요소">소프트웨어 비용 결정 요소</h2>

<ul>
  <li>프로젝트 요소
    <ul>
      <li>제품 복잡도 : 소프트웨어의 종류에 따라 발생할 수 있는 문제점들의 난이도</li>
      <li>시스템 크기 : 소프트웨어의 규모에 따라 개발해야 할 시스템의 크기</li>
      <li>요구되는 신뢰도 : 일정 기간 내 주어진 조건하에서 프로그램이 필요한 기능을 수행하는 정도</li>
    </ul>
  </li>
  <li>자원 요소
    <ul>
      <li>인적 자원 : 소프트웨어 개발 관련자들이 갖춘 능력 혹은 자질</li>
      <li>하드웨어 자원 : 소프트웨어 개발 시 필요한 장비와 워드프로세서, 프린터 등의 보조 장비</li>
      <li>소프트웨어 자원 : 소프트웨어 개발 시 필요한 언어 분석기, 문서화 도구 등의 개발 지원 도구</li>
    </ul>
  </li>
  <li>생산성 요소
    <ul>
      <li>개발자 능력 : 개발자들이 각춘 전문지식, 경험, 이해도, 책임감, 창의력 등</li>
      <li>개발 기간 : 소프트웨어를 개발하는 기간</li>
    </ul>
  </li>
</ul>

<h1 id="비용산정-방법---하향식">비용산정 방법 - 하향식</h1>

<h2 id="하향식-비용-산정-기법">하향식 비용 산정 기법</h2>

<ul>
  <li>
    <p>과거의 유사한 경험을 바탕으로 전문 지식이 많은 개발자들이 참여한 회으를 통해 비용을 산정하는 비과학적인 방법</p>
  </li>
  <li>
    <p>하향식 비용 산정 기법</p>
    <ul>
      <li>전문가 감정 기법</li>
      <li>델파이 기법</li>
    </ul>
  </li>
</ul>

<h2 id="전문가-감정-기법">전문가 감정 기법</h2>

<ul>
  <li>경험이 많은 두 명 이상의 전문가에게 비용 산정을 의로하는 기법</li>
</ul>

<h2 id="델파이-기법">델파이 기법</h2>

<ul>
  <li>전문가 감정 기법의 주관적인 편견을 보완하기 위해 많은 전문가의 의견을 종합하여 산정하는 기법</li>
</ul>]]></content><author><name>Lee Kyuhwan</name></author><category term="EIP_PS" /><category term="EIP_PS" /></entry><entry><title type="html">정처기 실기 요구사항 확인 11~13</title><link href="http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B802/" rel="alternate" type="text/html" title="정처기 실기 요구사항 확인 11~13" /><published>2022-04-17T00:00:00+09:00</published><updated>2022-04-17T00:00:00+09:00</updated><id>http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B802</id><content type="html" xml:base="http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B802/"><![CDATA[<h1 id="11-uml---관계relationship">11. UML - 관계(Relationship)</h1>

<h2 id="관계relationships">관계(Relationships)</h2>

<ul>
  <li>
    <p>사물과 사물 사이의 연관성을 표현하는 것</p>
  </li>
  <li>
    <p>관계의 종류</p>
    <ul>
      <li>연관 관계</li>
      <li>집합 관계</li>
      <li>포함 관계</li>
      <li>일반화 관계</li>
      <li>의존 관계</li>
      <li>실체화 관계</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>개별적인 개념과 표현 방법을 확실히 숙지</p>
</blockquote>

<h2 id="연관association-관계">연관(Association) 관계</h2>

<ul>
  <li>
    <p>2개 이상의 사물이 서로 관련되어 있는 관계</p>
  </li>
  <li>
    <p>실선으로 연결하여 표현</p>
  </li>
  <li>
    <p>방향성은 화살표로 표현</p>
  </li>
  <li>
    <p>양방향 관게는 실선으로만 연결</p>
  </li>
  <li>
    <p>다중도를 *로 실선위에 표기</p>
  </li>
</ul>

<table>
    <tr>
      <td>다중도</td>
      <td>의미</td>
    </tr>
    <tr>
      <td>1</td>
      <td>1개의 객체과 연관되어 있음</td>
    </tr>
    <tr>
      <td>n</td>
      <td>n개의 객체가 연관되어 있음</td>
    </tr>
    <tr>
      <td>0..1</td>
      <td>연관된 객체가 없거나 1개만 존재함</td>
    </tr>
    <tr>
      <td>0..* 또는 *</td>
      <td>연관된 객체가 없거나 다수일 수 있음</td>
    </tr>
    <tr>
      <td>1..*</td>
      <td>연관된 객체가 적어도 1개 이상임</td>
    </tr>
    <tr>
      <td>n..*</td>
      <td>연관된 객체가 적어도 n개 이상임</td>
    </tr>
    <tr>
      <td>n..m</td>
      <td>연관된 객체가 최소 n개에서 최대 m개임</td>
    </tr>
  </table>

<blockquote>
  <p>집은 한사람에 의해서만 소유가 가능하고 사람은 집을 하나만 소유가 가능 <image src="https://user-images.githubusercontent.com/93482597/163821865-5ccbb9d0-d5b7-4dd1-aa8f-58c8a0eab9c5.png"></image> 학생은 한 명 이상의 선생님으로부터 가르침을 받고 선생님은 한 명 이상의 학생을 가르친다 <image src="https://user-images.githubusercontent.com/93482597/163822091-6e659e9c-0d4c-424b-a6e2-3557d8fc4834.png"></image></p>
</blockquote>

<h2 id="집합aggregation-관계">집합(Aggregation) 관계</h2>

<ul>
  <li>하나의 사물이 다른 사물에 포함되어 있는 관계</li>
  <li>포함하는 쪽과 포함되는 쪽은 서로 독립적</li>
  <li>포함되는 쪽에서 포함하는 쪽으로 속이 빈 마름모를 연결</li>
</ul>

<blockquote>
  <p>프린터는 컴퓨터에 연결해서 사용할 수 있으며, 다른 컴퓨터에도 연결해서 사용 가능<image src="https://user-images.githubusercontent.com/93482597/163823157-1b6414c9-71aa-4db3-bc62-e88f0bd758b7.png"></image></p>
</blockquote>

<h2 id="포함composition-관계">포함(Composition) 관계</h2>

<ul>
  <li>포함하는 사물의 변화가 포함되는 사물에게 영향을 미치는 관계</li>
  <li>포함하는 쪽과 포함되는 쪽은 서로 독립될 수 없고 생명주기를 함께함</li>
  <li>포함되는 쪽에서 포함하는 쪽으로 속이 채워진 마름모를 연결하여 표현</li>
</ul>

<blockquote>
  <p>문을 열 수 있는 키는 하나이며, 해당 키로 다른 문은 열 수 없다. 문이 없어지면 키도 더 이상 필요하지 않다. <image src="https://user-images.githubusercontent.com/93482597/163823548-c2165327-2534-4716-8aba-6dd9db017a73.png"></image></p>
</blockquote>

<h2 id="일반화generalization-관계">일반화(Generalization) 관계</h2>
<ul>
  <li>하나의 사물이 다른 사물에 비해 더 일반적이거나 구체적인 관계</li>
  <li>일반적인 개념을 상위(부모), 구체적인 개념을 하위(자식)라고 부름</li>
  <li>구체적인 사물에서 일반적인 사물 쪽으로 속이 빈 화살표를 연결하여 표현</li>
</ul>

<blockquote>
  <p>아메리카노와 에스프레소는 커피, 커피에는 아메리카노와 에스프레소가 있다. <image src="https://user-images.githubusercontent.com/93482597/163824743-3f52dee1-8c9e-4616-b457-ed73ad9aa4ac.png"></image></p>
</blockquote>

<h2 id="의존dependency-관계">의존(Dependency) 관계</h2>

<ul>
  <li>서로에게 영향을 주는 짧은 시간 동안만 연관을 유지하는 관계</li>
  <li>사물의 변화가 다른 사물에도 영향을 미치는 관계</li>
  <li>영향을 주는사물(이용자)이 영향을 받는 사물(제공자) 쪽은로 점선 화살표를 연결하여 표현</li>
</ul>

<blockquote>
  <p>등급이 높으면 할인율을 적용하고 등급이 낮으면 할인율을 적용하지 않는다. <image src="https://user-images.githubusercontent.com/93482597/163825472-d234b8f1-73bc-4575-a7ca-620304d4038e.png"></image></p>
</blockquote>

<h2 id="실체화realization-관계">실체화(Realization) 관계</h2>

<ul>
  <li>사물이 할 수 있거나 해야 하는 기능으로, 서로를 그릅화 할 수 있는 관계</li>
  <li>사물에서 기능 쪽으로 속이 빈 점선 화살표를 연결</li>
</ul>

<blockquote>
  <p>비행기는 날 수 있고 새도 날 수 있다. 그러므로 비행기와 새는 날 수 있다는 행위로 그룹화 할 수 있다. <image src="https://user-images.githubusercontent.com/93482597/163825914-bed6d330-0d3d-4bfb-aaa6-4e564dae02b1.png"></image></p>
</blockquote>

<h1 id="12-uml---다이어-그램">12. UML - 다이어 그램</h1>

<h2 id="다이어그램diagram">다이어그램(Diagram)</h2>
<ul>
  <li>사물과 관계를 도형으로 표현한 것</li>
  <li>정적 모델링에서는 주로 구조적 다이어그램</li>
  <li>동적 모델링에서는 주로 행위 다이어그램</li>
</ul>

<blockquote>
  <p>다이어그램이 무엇인지, 구조적, 행위 다이어그램에 어떤것들이 있는지 암기</p>
</blockquote>

<h2 id="구조적structural-다이어그램-종류">구조적(Structural) 다이어그램 종류</h2>

<table>
  <tr>
    <th>
    종류
    </th>
    <th>
    내용
    </th>
  </tr>
  <tr>
    <td>
    클래스 다이어그램<br />(Class Diagram)
    </td>
    <td>
    클래스와 클래스가 가지는 속성, 클래스 사이의 관계를 표현함
    </td>
  </tr>
  <tr>
    <td>
    객체 다이어그램<br /> (Object Diagram)
    </td>
    <td>
    클래스에 속한 사물(객체)들, 즉 인스턴스(Instance)를 특정 시점의 객체와 객체 사이의 관계로 표현함<br />럼바우(Rumbaugh) 객체지향 분석 기법에서 객체 모델링에 활용됨
    </td>
  </tr>
  <tr>
    <td>
    컴포넌트 다이어그램<br />(Component Diagram)
    </td>
    <td>
    실제 구현 모듈인 컴포넌트 간의 관계나 컴포넌트 간의 인터페이스를 표현함<br />구현 단계에서 사용됨
    </td>
  </tr>
  <tr>
    <td>
    배치 다이어그램<br />(Deployment Diagram)
    </td>
    <td>
    결과물, 프로세스, 컴포넌트 등 물리적 요소들의 위치를 표현함<br />구현 단계에서 사용됨
    </td>
  </tr>
  <tr>
    <td>
    복합체 구조 다이어그램<br />(Composite Structure Diagram)
    </td>
    <td>
    클래스나 컴포넌트가 복합 구조를 갖는 경우 그 내부 구조를 표현함
    </td>
  </tr>
  <tr>
    <td>
    패키지 다이어그램<br />(Package Diagram)
    </td>
    <td>
    유스케이스나 클래스 등의 모델 요소들을 그룹화한 패키지들의 관계를 표현함
    </td>
  </tr>

</table>

<blockquote>
  <p>클객컴배복패</p>
</blockquote>

<h2 id="행위behavioral-다이어그램의-종류">행위(Behavioral) 다이어그램의 종류</h2>

<table>
  <tr>
    <th>종류</th>
    <th>내용</th>
  </tr>
  <tr>
    <td>유스케이스 다이어그램<br />(Use Case Diagram)</td>
    <td>사용자의 요구를 분석하는 것으로, 기능 모델링 작업에 사용<br />사용자(Actor)와 사용사례(Use Case)로 구성됨</td>
  </tr>
  <tr>
    <td>시퀀스 다이어그램<br /></td>
    <td>상호 작용하는 시스템이나 객체들이 주고 받는 메시지를 표현</td>
  </tr>
  <tr>
    <td>커뮤니케이션 다이어그램<br />(Communication Diagram)</td>
    <td>동작에 참여하는 객체들이 주고받는 메시지와 객체들 간의 연관 관계를 표현</td>
  </tr>
  <tr>
    <td>상태 다이어그램<br />(State Diagram)</td>
    <td>하나의 객체가 자신이 속한 클래스의 상태 변화 혹은 다른 객체와의 상호 작용에 따라 상태가 어떻게 변화하는지를 표현<br />럼바우(Rumbaugh) 객체지향 분석 기법에서 동적 모델링에 활용</td>
  </tr>
  <tr>
    <td>활동 다이어그램<br />(Activity Diagram)</td>
    <td>시스템이 어떤 기능을 수행하는지 객체의 처리 로직이나 조건에 따른 처리의 흐름을 순서에 따라 표현함</td>
  </tr>
  <tr>
    <td>상호작용 개요 다이어그램<br />(Interaction Overview Diagram)</td>
    <td>상호작용 다이어그램 간에 제어 흐름을 표현</td>
  </tr>
  <tr>
    <td>타이밍 다이어그램<br />(Timing Diagram)</td>
    <td>객체 상태 변화와 시간 제약을 명시적으로 표현함</td>
  </tr>
</table>

<blockquote>
  <p>유시커상활상타</p>
</blockquote>

<h2 id="스테레오-타입stereotype">스테레오 타입(Stereotype)</h2>

<ul>
  <li>UML에서 표현하는 기본 기능 외에 추가적인 기능을 표현하는 것</li>
  <li>길러멧(Guilemet)이라고 부르는 겹화살괄호(«») 사이에 표현할 형태를 기술</li>
</ul>

<table>
  <tr>
    <th>
    표현 형태
    </th>
     <th>
     의미
    </th>
  </tr>
    <tr>
    <td>
    &lt;&lt;'include&gt;&gt;
    </td>
     <td>
     연결된 다른 UML 요소에 대해 포함 관계에 있는 경우
    </td>
  </tr>
 <tr>
    <td>
    &lt;&lt;'extends&gt;&gt;
    </td>
     <td>
     연결된 다른 UML 요소에 대해 확장 관계에 있는 경우
    </td>
  </tr>
 <tr>
    <td>
    &lt;&lt;'interface&gt;&gt;
    </td>
     <td>
     인터페이스를 정의하는 경우
    </td>
  </tr>
 <tr>
    <td>
    &lt;&lt;'exception&gt;&gt;
    </td>
     <td>
     예외를 정의하는 경우
    </td>
  </tr>
 <tr>
    <td>
    &lt;&lt;'constructor&gt;&gt;
    </td>
     <td>
     생성자 역할을 수행하는 경우
    </td>
  </tr>

</table>

<h1 id="13-유스케이스use-case-다이어그램">13. 유스케이스(Use Case) 다이어그램</h1>

<ul>
  <li>
    <p>유스케이스(Use Case)는 사용자가 보는 관점에서 시스템이 액터에게 제공하는 서비스 또는 기능을 표현한 것</p>
  </li>
  <li>
    <p>타원으로 표현하며, 타원 안쪽이나 아래쪽에 유스케이스(Use Case) 이름을 기술한다</p>
  </li>
  <li>
    <p>유스케이스(Use Case) 이름은 액터와 시스템 사이에서 이뤄지는 상호 작용의 목적을 내포하되 단순 명료하게 기술</p>
  </li>
</ul>

<h3 id="관계relationship">관계(Relationship)</h3>

<ul>
  <li>
    <p>포함 «‘include»</p>
  </li>
  <li>
    <p>확장 «‘extends»</p>
  </li>
  <li>
    <p>일반화</p>
  </li>
</ul>

<h3 id="유스케이스-다이어그램을-표현할-때-사용되는-구성-요소-4가지">유스케이스 다이어그램을 표현할 때 사용되는 구성 요소 4가지</h3>

<ul>
  <li>
    <p>시스템(System)/ 시스템 범위(System Scope)</p>
  </li>
  <li>
    <p>액터(Actor)</p>
  </li>
  <li>
    <p>유스케이스(Use Case)</p>
  </li>
  <li>
    <p>관계(Relationship)</p>
  </li>
</ul>]]></content><author><name>Lee Kyuhwan</name></author><category term="EIP_PS" /><category term="EIP_PS" /></entry><entry><title type="html">정처기 실기 요구사항 확인 1~5</title><link href="http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B800/" rel="alternate" type="text/html" title="정처기 실기 요구사항 확인 1~5" /><published>2022-04-08T00:00:00+09:00</published><updated>2022-04-09T00:00:00+09:00</updated><id>http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B800</id><content type="html" xml:base="http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B800/"><![CDATA[<h1 id="1-소프트웨어-생명-주기">1. 소프트웨어 생명 주기</h1>

<h2 id="소프트웨어-생명-주기software-life-cycle">소프트웨어 생명 주기(Software Life Cycle)</h2>
<ul>
  <li>
    <p>소프트웨어를 개발하기 위한 과정을 각 단계별로 나눈 것</p>
  </li>
  <li>
    <p>대표 모형</p>
    <ul>
      <li>폭포수 모형</li>
      <li>프로토타입 모형</li>
      <li>나선형 모형</li>
      <li>애자일 모형</li>
    </ul>
  </li>
</ul>

<h2 id="폭포수-모형waterfall-model-원형-모형">폭포수 모형(Waterfall Model, 원형 모형)</h2>
<ul>
  <li>각 단계를 확실히 매듭짓고 다음 단계를 진행하는 개발 방법론
    <blockquote>
      <p>전통적인 소프트웨어 생명 주기 모형</p>
    </blockquote>
  </li>
</ul>

<h2 id="프로토타입-모형prototype-model-원형-모형">프로토타입 모형(Prototype Model, 원형 모형)</h2>
<ul>
  <li>견본품(Prototype)을 만들어 최종 결과물을 예측하는 모형</li>
</ul>

<h2 id="나선형-모형spiral-model-점진적-모형">나선형 모형(Spiral Model, 점진적 모형)</h2>
<ul>
  <li>여러 번의 소프트웨어 개발 과정을 거쳐 점진적으로 개발하는 모형</li>
</ul>

<p><strong>4가지 주요 활동</strong></p>

<blockquote>
  <p>계획 수립 -&gt; 위험 분석 -&gt; 개발 및 검증 -&gt; 고객 평가 <strong>(계위개고)</strong></p>
</blockquote>

<h2 id="애자일-모형agile-model">애자일 모형(Agile Model)</h2>

<ul>
  <li>
    <p>요구사항 변화에 유연하게 대응할 수 있도록 일정한 주기를 반복하면서 개발하는 모형</p>
  </li>
  <li>
    <p><strong><em>폭포수 모형과 대조적</em></strong></p>
  </li>
  <li>
    <p><strong>대표 모형</strong></p>
    <ul>
      <li>스크럼(Scrum)</li>
      <li>XP(eXtreme Programming)</li>
      <li>칸반(Kanban)</li>
      <li>Lean</li>
      <li>기능 중심 개발(FDD;Feature Driven Development)</li>
    </ul>
  </li>
</ul>

<h2 id="애자일-개발-4가지-핵심-가치">애자일 개발 4가지 핵심 가치</h2>
<ul>
  <li>프로세스와 도구보다는 개인과 상호작용에 더 가치를 둔다.</li>
  <li>방대한 문서보다는 실행되는 SW에 더 가치를 둔다.</li>
  <li>계약 협상보다는 고객과 협업에 더 가치를 둔다.</li>
  <li>계획을 따르기 보다는 변화에 반응하는 것에 더 가치를 둔다.</li>
</ul>

<h2 id="소프트웨어-공학">소프트웨어 공학</h2>
<ul>
  <li>소프트웨어의 위기를 극복하기 위한 방안으로 연구된 학문</li>
  <li>소프웨어 공학의 기본 원칙
    <ul>
      <li>현대적인 프로그래밍 기술을 계속적으로 적용해야 한다.</li>
      <li>개발된 소프트웨어의 품질이 유지되도록 지속적으로 검증해야 한다.</li>
      <li>소프트웨어 개발 관련 사항 및 결과에 대한 명확한 기록을 유지해야 한다.</li>
    </ul>
  </li>
</ul>

<h1 id="2-스크럼scrum-기법">2. 스크럼(Scrum) 기법</h1>

<h2 id="스크럼scrum">스크럼(Scrum)</h2>
<p>팀이 중심이 되어 개발의 효율성을 높이는 기법</p>

<h2 id="스크럼-팀">스크럼 팀</h2>

<table>
  <thead>
    <tr>
      <th>구성원</th>
      <th>역할</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>제품 책임자(PO;Product Owner)</td>
      <td>백로그(Backlog)를 작성<br /> 이해도가 높고, 의사를 결정할 사람</td>
    </tr>
    <tr>
      <td>스크럼 마스터(SM;Scrum Master)</td>
      <td>가이드 역할</td>
    </tr>
    <tr>
      <td>개발팀(DT;Development Team)</td>
      <td>제품 개발을 수행</td>
    </tr>
  </tbody>
</table>

<h2 id="스크럼-개발-프로세스">스크럼 개발 프로세스</h2>

<table>
  <thead>
    <tr>
      <th>프로세스</th>
      <th>내용</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>스프린트 계획 회의(Springt Planning Meeting)</td>
      <td>제품 백로그 중 이번 스프린트에서 수행할 작업을 대상으로 단기 일정을 수립하는 회의</td>
    </tr>
    <tr>
      <td>스프린트(Sprint)</td>
      <td>실제 개발 작업을 진행하는 과정, 2~4주 정도</td>
    </tr>
    <tr>
      <td>일일 스크럼 회의(Daily Scrum Meeting)</td>
      <td>모든 팀원이 약속된 시간에 약 15분 동안 진행 상황을 점검하는 회의&lt;/br&gt;남은 작업 시간은 소멸 차드(Burn-down Chart)에 표시</td>
    </tr>
    <tr>
      <td>스프린트 검토 회의(Sprint Review)</td>
      <td>요구사항에 잘 부합하는지 테스팅</td>
    </tr>
    <tr>
      <td>스프린트 회고(Sprint Retrospective)</td>
      <td>규칙 준수 여부 및 개선할 점을 확인하고 기록</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>계획 -&gt; 진행(스프린트) -&gt; 회의, 검토 -&gt; 회고 순으로 진행</p>
</blockquote>

<h1 id="3-xpextreme-programming-기법">3. XP(eXtreme Programming) 기법</h1>

<h2 id="xpextreme-programming">xp(eXtreme Programming)</h2>

<ul>
  <li>
    <p>요구사항에 유연하게 대응하기 위해 고객의 참여와 개발 과정의 반복을 극대화 하여 생산성을 향상시키는 방법</p>
  </li>
  <li>
    <p>XP의 5가지 핵심 가치 (암기)</p>
    <ul>
      <li>의사소통(Cmmunication)</li>
      <li>단순성(Simplicity)</li>
      <li>용기(Courage)</li>
      <li>존중(Respect)</li>
      <li>피드백(Feedback)</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>용단의피존</p>
</blockquote>

<h2 id="xp-개발-프로세스">xp 개발 프로세스</h2>

<table>
  <thead>
    <tr>
      <th>프로세스</th>
      <th>내용</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>릴리즈 계획 수립<br />(Release Planning)</td>
      <td>부분 혹은 전체 개발 완료 시점에 대한 일정을 수립<br />몇개의 스토리가 적용되어 부분적으로 기능이 완료된 제품을 제공하는 것을 릴리즈라고 함</td>
    </tr>
    <tr>
      <td>이터레이션<br />(Iteration, 주기)</td>
      <td>실제 개발 작업을 진행하는 과정으로, 보통 1~3주 정도의 기간으로 진행됨</td>
    </tr>
    <tr>
      <td>승인 검사<br />(Acceptance Test, 인수 테스트)</td>
      <td>하나의 이터레이션 안에서 부분 완료 제품이 구현되면 수행하는 테스트</td>
    </tr>
    <tr>
      <td>소규모 릴리즈<br />(Small Release)</td>
      <td>요구사항에 유연하게 대응할 수 있도록 릴리즈의 규모를 축소 한 것</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>계획하고 진행한 후 검사하고 출시한다 (진행 -&gt; 이터레이션, 출시 -&gt; 릴리즈)</p>
</blockquote>

<h2 id="xp의-주요-실천-방법practice">xp의 주요 실천 방법(Practice)</h2>

<table>
  <thead>
    <tr>
      <th>실천 방법</th>
      <th>내용</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Pair Programming&lt;div&gt;(짝 프로그래밍)</td>
      <td>다른 사람과 함께 프로그래밍을 수행함으로써 개발에 대한 책임을 공동으로 나눠 갖는 환경을 조성</td>
    </tr>
    <tr>
      <td>Collective Ownership&lt;div&gt;(공동 코드 소유)</td>
      <td>개발 코드에 대한 권한과 책임을 공동으로 소유</td>
    </tr>
    <tr>
      <td>Test-Driven Development&lt;div&gt;(테스트 주도 개발)</td>
      <td>개발자가 실제 코드를 작</td>
    </tr>
    <tr>
      <td>Whole Team&lt;div&gt;(전체 팀)</td>
      <td>개발에 참여하는 모든 구성원(고객 포함)들은 각자 자신의&lt;div&gt;역할이 있고 그 역할에 대한 책임을 가져야 함</td>
    </tr>
    <tr>
      <td>Continuous Integration&lt;div&gt;(계속적인 통합)</td>
      <td>모듈 단위로 나눠서 개발된 코드들은 하나의 작업이 마무리 될 때마다 지속적으로 통합됨</td>
    </tr>
    <tr>
      <td>Refactoring(리팩토링)</td>
      <td>프로그램 기능의 변경 없이 시스템을 재구성함&lt;div&gt;목적 : 프로그램을 쉽게 이해하고 쉽게 수정하여 빠르게 개발할 수 있도록 하기 위함</td>
    </tr>
    <tr>
      <td>Small Release(소규모 릴리즈)</td>
      <td>릴리즈 기간을 짧게 반복함으로써 고객의 요구 변화에 신속히 대응할 수 있음</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>주요 실천 방법은 영문으로도 알고 있어야 함</p>
</blockquote>

<h1 id="4-현행-시스템-파악">4. 현행 시스템 파악</h1>

<table>
  <tr>
    <td>프로세스</td>
    <td>현행 시스템</td>
    <td>내용</td>
  </tr>
  <tr>
    <td rowspan="3">1단계</td>
    <td> 시스템 구성 파악</td>
    <td>조직의 주요 업무를 담당하는 기간 업무와 이를 지원하는 지원 업무로 구분하여 기술</td>
  </tr>
   <tr>
    <td>시스템 기능 파악</td>
    <td>현재 제공하는 기능들을 주요 기능과 하부 기능, 세부 기능으로 구분하여 계층형으로 표시함</td>
  </tr>
  <tr>
    <td>시스템 인터페이스 파악</td>
    <td>단위 업무 시스템 간에 주고받는 데이터의 종류, 형식, 프로토콜, 연계 유형, 주기 등을 명시함</td>
  </tr>
   <tr>
    <td rowspan="2">2단계</td>
    <td>아키텍처 구성 파악</td>
    <td>최상위 수준에서 계층별로 표현한 아키텍처 구성도를 작성함</td>
  </tr>
  <tr>
    <td>소프트웨어 구성 파악</td>
    <td>소프트웨어들의 제품명, 용도, 라이선스 적용 방식, 라이선스 수 등을 명시함</td>
  </tr>
   <tr>
    <td rowspan="2">3단계</td>
    <td>하드웨어 구성 파악</td>
    <td>단위 업무 시스템들이 운용되는 서버의 주요 사양 과 수량, 그리고 서버의 이중화 적용 여부를 명시함</td>
  </tr>
     <tr>
    <td>네트워크 구성 파악</td>
    <td>서버의 위치, 서버 간의 네트워크 연결 방식을 네트워크 구성도로 작성함</td>
  </tr>
</table>

<blockquote>
  <p>시스템의 개발 범위를 명확히 설정하려면 현행 시스텡이 어떻게 구성되어 있는지 파악해야 됨</p>
</blockquote>

<h1 id="5-개발-기술-환경-파악">5. 개발 기술 환경 파악</h1>

<blockquote>
  <p>요구사항 식별 시 고려사항 암기</p>
</blockquote>

<h2 id="개발-기술-환경-파악의-개요">개발 기술 환경 파악의 개요</h2>
<p>개발 하고자 하는 소프트웨어와 관련된 운영체제(OS), 데이터베이스 관리 시스템(DBMS), 미들웨어 등을 선정할 때 고려해야 하 할 사항을 기술하고, 오픈 소스를 사용할 때 주의해야 할 내용을 제시</p>

<h2 id="운영체제os--operating-system">운영체제(OS , Operating System)</h2>

<ul>
  <li>컴퓨터 시스템의 자원을 효율적으로 관리하며, 컴퓨터를 효율적으로 사용할 수 있도록 환경을 제공하는 소프트웨어</li>
  <li>운영체제 관련 요구사항 식별 시 고려사항
    <ul>
      <li>가용성</li>
      <li>성능</li>
      <li>기술 지원</li>
      <li>주변 기기</li>
      <li>구축 비용</li>
    </ul>
  </li>
</ul>

<h2 id="데이터베이스-관리-시스템dbms-database-mangement-system">데이터베이스 관리 시스템(DBMS; DataBase Mangement System)</h2>

<ul>
  <li>
    <p>사용자와 데이터베이스 사이에서 사용자의 요구에 따라 정보를 생성해 주고, 데이터베이스를 관리해 주는 소프트웨어</p>
  </li>
  <li>
    <p>DBMS 관련 요구사항 식별 시 고려사항</p>
    <ul>
      <li>가용성</li>
      <li>성능</li>
      <li>기술 지원</li>
      <li>상호 호환성</li>
      <li>구축 비용</li>
    </ul>
  </li>
</ul>

<h2 id="웹-애플리케이션-서버was-web-application-server">웹 애플리케이션 서버(WAS; Web Application Server)</h2>

<ul>
  <li>
    <p>사용자의 요구에 따라 변하는 동적인 콘텐츠를 처리하기 위해 사용되는 미들웨어</p>
  </li>
  <li>
    <p>웹 애플리케이션 서버 관련 요구사항 식별 시 고려사항
    - 가용성
    - 성능
    - 기술 지원
    - 구축 비용</p>
  </li>
</ul>

<h2 id="오픈-소스-open-source">오픈 소스 (Open Source)</h2>

<ul>
  <li>누구나 별다른 제한 없이 사용할 수 있도록 소스 코드를 공개한 소프트웨어</li>
  <li>웹 애플리케이션 서버 관련 요구사항 식별 시 고려사항
    - 라이선스의 종류
    - 사용자 수
    - 기술의 지속 가능성</li>
</ul>]]></content><author><name>Lee Kyuhwan</name></author><category term="EIP_PS" /><category term="EIP_PS" /></entry><entry><title type="html">정처기 실기 요구사항 확인 6~10</title><link href="http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B801/" rel="alternate" type="text/html" title="정처기 실기 요구사항 확인 6~10" /><published>2022-04-08T00:00:00+09:00</published><updated>2022-04-17T00:00:00+09:00</updated><id>http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B801</id><content type="html" xml:base="http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B801/"><![CDATA[<h1 id="6-요구사항-정의">6. 요구사항 정의</h1>
<blockquote>
  <p>요구사항의 개념을 정리해 두는것이 좋음</p>
  <h2 id="요구사항">요구사항</h2>
  <ul>
    <li>소프트웨어가 어떤 문제를 해결하기 위해 제공하는 서비스에 대한 설명과 운영되는데 필요한 제약 조건</li>
    <li>요구사항의 유형
      <ul>
        <li>기능 요구사항(Functional requirements)</li>
        <li>비기능 요구사항(Non-functional requirements)</li>
        <li>사용자 요구사항(User requirements)</li>
        <li>시스템 요구사항(System requirements)</li>
      </ul>
    </li>
  </ul>
</blockquote>

<h2 id="기능-요구사항functional-requirements">기능 요구사항(Functional requirements)</h2>

<ul>
  <li>기능이나 수행과 관련된 요구사항</li>
</ul>

<h2 id="비기능-요구사항non-functional-requirements">비기능 요구사항(Non-functional requirements)</h2>

<ul>
  <li>품질이나 제약사항과 관련된 요구사항</li>
</ul>

<h2 id="사용자-요구사항user-requirements">사용자 요구사항(User requirements)</h2>

<ul>
  <li>사용자 관점에서 본 시스템이 제공해야 할 요구사항</li>
</ul>

<h2 id="시스템-요구사항system-requirements">시스템 요구사항(System requirements)</h2>

<ul>
  <li>개발자 관점에서 본 시스템 전체가 제공해야 할 요구사항</li>
</ul>

<h1 id="7-요구사항-개발-프로세스">7. 요구사항 개발 프로세스</h1>

<h2 id="요구사항-개발-프로세스">요구사항 개발 프로세스</h2>
<p>요구사항을 체계적으로 도출하고 분석한 후 명세서에 정리한 다음 확인 및 검증하는 일련의 구조화된 활동</p>

<blockquote>
  <p>도출(Elicitation)  -&gt; 분석(Analysis) -&gt; 명세(Specification) -&gt; 확인(Validation)
도분명확</p>
</blockquote>

<h2 id="요구사항-도출requirement-elicitation-요구사항-수집">요구사항 도출(Requirement Elicitation, 요구사항 수집)</h2>
<ul>
  <li>시스템 개발에 관련된 사람들이 서로 의견을 교환하여 요구사항을 어떻게 수집할 것인지를 식별하고 이해하는 과정</li>
  <li>요구사항을 도출하는 주요 기법
    <ul>
      <li>청취와 인터뷰</li>
      <li>설문</li>
      <li>브레인스토밍</li>
      <li>워크샵</li>
      <li>프로토타이핑</li>
      <li>유스케이스</li>
    </ul>
  </li>
</ul>

<h2 id="요구사항-분석requirement-analysis">요구사항 분석(Requirement Analysis)</h2>
<ul>
  <li>요구사항 중 명확하지 않거나 모호하여 이해되지 않는 부분을 발견하고 이를 걸러내기 위한 과정</li>
  <li>사용되는 대표적인 도구
    <ul>
      <li>자료 흐름도(DFD)</li>
      <li>자료 사전(DD)</li>
    </ul>
  </li>
</ul>

<h2 id="요구사항-명세requirement-specification">요구사항 명세(Requirement Specification)</h2>
<ul>
  <li>분석된 요구사항을 바탕으로 모델을 작성하고 문서화하는 것</li>
</ul>

<h2 id="요구사항-확인requirement-validation-요구사항-검증">요구사항 확인(Requirement Validation, 요구사항 검증</h2>
<ul>
  <li>요구사항 명세서가 정확하고 완전하게 작성되었는지를 검토하는 활동</li>
</ul>

<h2 id="요구공학requirements-engineering">요구공학(Requirements Engineering)</h2>
<ul>
  <li>요구사항을 정의하고, 분석 및 관리하는 프로세스를 연구하는 학문</li>
</ul>

<h2 id="요구사항-명세-기법">요구사항 명세 기법</h2>

<table>
  <tr>
    <td>구분</td>
    <td>정형 명세 기법</td>
    <td>비정형 명세 기법</td>
  </tr>
  
  <tr>
    <td>기법</td>
    <td>수학적 원리 기반, 모델 기반</td>
    <td>상태/ 기능/ 객체 중심</td>
  </tr>
  
  <tr>
    <td>작성 방법</td>
    <td>수학적 기호, 정형화된 표기법</td>
    <td>일반 명사, 동사 등의 자연어를 기반으로 서술 또는 다이어그램으로 작성</td>
  </tr>
  
  <tr>
    <td>특징</td>
    <td>요구사항을 정확하고 간결하게 표현할 수 있음 <br />요구사항에 대한 결과가 작성자에 관계없이 일관성이 있으므로 완전성 검증이 가능함<br />표기법이 어려워 사용자가 이해하기 어려움</td>
    <td>자연어의 사용으로 인해 요구사항에 대한 결과가 작성자에 따라 다를 수 있어 일관성이 떨어지고, 해석이 달라질 수 있음<br />내용의 이해가 쉬어 의사소통이 용이함</td>
  </tr>
  
  <tr>
    <td>종류</td>
    <td>VDM, Z, Petri-net, CSP 등</td>
    <td>FSM, Decision Table, ER모델링, State Chart(SADT) 등</td>
  </tr>
</table>

<h1 id="8-요구사항-분석">8. 요구사항 분석</h1>

<h2 id="요구사항-분석requirement-analysis-1">요구사항 분석(Requirement Analysis)</h2>

<ul>
  <li>개발 대상에 대한 사용자의 요구사항을 이해하고 문서화 하는 활동을 의미</li>
</ul>

<h2 id="구조적-분석-기법">구조적 분석 기법</h2>

<ul>
  <li>
    <p>자료의 흐름과 처리를 중심으로 하는 요구사항 분석 방법</p>
  </li>
  <li>
    <p>주요 구조적 분석 기법 도구 (암기)</p>

    <ul>
      <li>자료 흐름도(DFD)</li>
      <li>자료 사전(DD)</li>
      <li>소단위 명세서(Mini-Spec.)</li>
      <li>개체 관계도(ERD)</li>
      <li>상태 전이도(STD)</li>
      <li>제어 명세서</li>
    </ul>
  </li>
</ul>

<h2 id="자료-흐름드dfd-datea-flow-diagram">자료 흐름드(DFD; Datea Flow Diagram)</h2>

<ul>
  <li>자료의 흐름 및 변환 과정과 기능을 도형 중심으로 기술하는 방법</li>
</ul>

<h2 id="자료-흐름도-기본-기호">자료 흐름도 기본 기호</h2>

<table>
  <tr>
    <td rowspan="2">기호</td>
    <td rowspan="2">의미</td>
    <td colspan="2">표기법</td>
    
  </tr>
  
  <tr>
    <td>Yourdon/ DeMacro</td>
    <td>Gane/ Sarson</td>
  </tr>
  
  <tr>
    <td>프로세스(Process)</td>
    <td>자료를 변환시키는 시스템의 한 부분(처리과정)을 나타내며 처리, 기능, 변환, 버블이라고고도 함</td>
    <td><image src="https://user-images.githubusercontent.com/93482597/163679391-0e88b373-45b8-4440-9db1-7463f5394eb3.png" with="60px" heigh="60px"></image></td>
    <td><image src="https://user-images.githubusercontent.com/93482597/163679419-071103c1-1689-438a-a7c6-f06dae64e368.png" with="60px" heigh="60px"></image>
    </td>
  </tr>
  
  <tr>
    <td>자료 흐름(Data Flow)</td>
    <td>자료의 이동(흐름)이나 연관관계를 나타냄</td>
    <td colspan="2"><image src="https://user-images.githubusercontent.com/93482597/163679476-72c9b1bd-1b99-47bb-ab73-44f273099449.png" with="60px" heigh="60px"></image>
    </td>
  </tr>
  
  <tr>
    <td>자료 저장소(Terminator)</td>
    <td>시스템에서의 자료 저장소(파일, 데이터베이스)를 나타냄</td>
    <td> <image src="https://user-images.githubusercontent.com/93482597/163679530-97939946-a208-465a-99ac-b06690dcc0d6.png" with="60px" heigh="60px"></image>
    </td>
    <td> <image src="https://user-images.githubusercontent.com/93482597/163679663-0d76bec7-32ef-4c88-87ec-71ef3fdba785.png" with="60px" heigh="60px"></image></td>
  </tr>

  <tr>
    <td>단말(Terminator)</td>
    <td>시스템과 교신하는 외부 개체로, 입력 데이터가 만들어지고 출력 데이터를 받음</td>
    <td> <image src="https://user-images.githubusercontent.com/93482597/163679703-8c76a146-91f9-46b7-92df-21139656bfb2.png"></image></td>
    <td> <image src="https://user-images.githubusercontent.com/93482597/163679709-7d3aba52-aefa-4658-a1f8-f2b955e89dd9.png"></image></td>
  </tr>
      </table>

<h2 id="자료-사전dd-data-dictionary">자료 사전(DD; Data Dictionary)</h2>

<ul>
  <li>
    <p>자료의 흐름도에 있는 자료를 정의하고 기록한 것</p>
  </li>
  <li>
    <p>자료 사전에서 사용되는 표기 기호</p>
  </li>
</ul>

<table>

  <tr>
    <td>기호</td>
    <td>의미</td>
  </tr> 
  
  <tr>
    <td>=</td>
    <td> 자료의 정의 : ~로 구성되어 있다(is composed of)</td>
  </tr> 
 
  <tr>
    <td>+</td>
    <td> 자료의 연결 : 그리고(and)</td>
  </tr> 
      
  <tr>
    <td>(  )</td>
    <td> 자료의 생략 : 생략 가능한 자료(Optional)</td>
  </tr> 
      
  <tr>
    <td>[  ]</td>
    <td> 자료의 선택 : 또는(or)</td>
  </tr> 
      
  <tr>
    <td>{  }</td>
    <td> 자료의 반복 : Iteration of <br /> <image src="https://user-images.githubusercontent.com/93482597/163680303-d45b3fb1-f5eb-41d3-8353-345d4c0455be.png " with="60" height="60"> : n번 이상 반복 </image> <br /><image src="https://user-images.githubusercontent.com/93482597/163680300-7fe7ae4c-7719-42b0-b159-d222da00bda5.png" with="60" height="60"> : 최대로 n번 반복 </image> <br /> <image src="https://user-images.githubusercontent.com/93482597/163680299-ce091380-a147-4bf6-8b89-5dce33e1acf8.png" with="60px" height="60px"> </image> : m 이상  n 이하로 반복</td>
  </tr> 
      
<tr>
    <td>"  "</td>
    <td> 자료의 설명 : 주석(Comment)</td>
</tr> 
</table>

<h1 id="9-요구사항-분석case와-hipo">9. 요구사항 분석CASE와 HIPO</h1>

<h2 id="요구사항-분석용-case자동화-도구">요구사항 분석용 CASE(자동화 도구)</h2>

<ul>
  <li>
    <p>요구사항을 자동으로 분석하고, 요구사항 분석 명세서를 기술하도록 개발된 도구</p>
  </li>
  <li>
    <p>대표적인 요구사항 분석용 CASE</p>
  </li>
</ul>

<table>
  <tr>
    <td>SADT</td>
    <td>
      시스템 정의, 소프트웨어 요구사항 분석, 시스템/소프트웨어 설계를 위한 도구 <br />SoftTech 사에서 개발<br />구조적 요구 분석을 하기 위해 블록 다이어그램을 채택한 자동화 도구
    </td>
  </tr>

   <tr>
    <td>SREM = RSL/REVS</td>
    <td>TRW 사가 실시간 처리 소프트웨어 시스템에서 요구사항을 명확히 기술하도록 할 목적으로 개발한 도구<br />RSL과 REVS를 사용하는 자동화 도구</td>
  </tr>

   <tr>
    <td>PSL/PSA</td>
    <td>PSL과 PSA를 사용하는 자동화 도구<br />미시간 대학에서 개발</td>
  </tr>

   <tr>
    <td>TAGS</td>
    <td>시스템 공학 방법 응용에 대한 자동 접근 방법<br />개발 주기의 전 과정에 이용할 수 있는 자동화 도구</td>
  </tr>
</table>

<blockquote>
  <p>도구의 종류와 각각의 의미를 정확하게 암기 (SSPPT)</p>
</blockquote>

<h2 id="hipohierarchy-input-process-output">HIPO(Hierarchy Input Process Output)</h2>

<ul>
  <li>
    <p>시스템 실행 과정인 입력, 처리, 출력의 기능을 표현한 것</p>
  </li>
  <li>
    <p>하향식 소프트웨어 개발을 위한 문서화 도구</p>
  </li>
</ul>

<h1 id="10-umlunified-modeling-language의-개요">10. UML(Unified Modeling Language)의 개요</h1>

<h2 id="umlunified-modeling-language">UML(Unified Modeling Language)</h2>
<p>시스템 개발 과정에서 의사소통이 원활하게 이루어지도록 표준화한 대표적인 객체지향 모델링 언어이다.</p>

<ul>
  <li>UML의 구성요소
    <ul>
      <li>사물(Things)</li>
      <li>관계(Relationships)</li>
      <li>다이어그램(Diagram)</li>
    </ul>
  </li>
</ul>

<h2 id="사물-things">사물 (Things)</h2>

<ul>
  <li>
    <p>다이어그램 안에서 형성될 수 있는 대상들</p>
  </li>
  <li>
    <p>사물의 종류</p>
  </li>
</ul>
<table>
  <tr>
    <td>사물</td>
    <td>내용</td>
  </tr>

  <tr>
    <td>구조 사물<br />(Structural Things)</td>
    <td>시스템의 개념적, 물리적 요소를 표현<br />클래스(Class), 유스케이스(Use Case), 컴포넌트(Component), 노드(Node) 등</td>
  </tr>

  <tr>
    <td>행동 사물<br />(Behavioral Things)</td>
    <td>시간과 공간에 따른 요소들의 행위를 표현<br />상호작용(Interaction), 상태 머신(State Machine)등</td>
  </tr>

  <tr>
    <td>그룹 사물<br />(Grouping Things)</td>
    <td>요소들을 그룹으로 묶어서 표현<br />패키지(Package)</td>
  </tr>

  <tr>
    <td>주해 사물<br />(Annotation Things)</td>
    <td>부가적인 설명이나 제약조건 등을 표현<br />노트(Note)</td>
  </tr>

</table>]]></content><author><name>Lee Kyuhwan</name></author><category term="EIP_PS" /><category term="EIP_PS" /></entry></feed>