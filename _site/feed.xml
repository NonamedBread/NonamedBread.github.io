<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-04-17T02:29:11+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">NonamedBread</title><subtitle>An amazing website.</subtitle><author><name>Lee Kyuhwan</name></author><entry><title type="html">정처기 실기 요구사항 확인 11~15</title><link href="http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B802/" rel="alternate" type="text/html" title="정처기 실기 요구사항 확인 11~15" /><published>2022-04-17T00:00:00+09:00</published><updated>2022-04-17T00:00:00+09:00</updated><id>http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B802</id><content type="html" xml:base="http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B802/"><![CDATA[<h1 id="under-construction">under construction</h1>]]></content><author><name>Lee Kyuhwan</name></author><category term="EIP_PS" /><category term="EIP_PS" /></entry><entry><title type="html">정처기 실기 요구사항 확인 1~5</title><link href="http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B800/" rel="alternate" type="text/html" title="정처기 실기 요구사항 확인 1~5" /><published>2022-04-08T00:00:00+09:00</published><updated>2022-04-09T00:00:00+09:00</updated><id>http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B800</id><content type="html" xml:base="http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B800/"><![CDATA[<h1 id="1-소프트웨어-생명-주기">1. 소프트웨어 생명 주기</h1>

<h2 id="소프트웨어-생명-주기software-life-cycle">소프트웨어 생명 주기(Software Life Cycle)</h2>
<ul>
  <li>
    <p>소프트웨어를 개발하기 위한 과정을 각 단계별로 나눈 것</p>
  </li>
  <li>
    <p>대표 모형</p>
    <ul>
      <li>폭포수 모형</li>
      <li>프로토타입 모형</li>
      <li>나선형 모형</li>
      <li>애자일 모형</li>
    </ul>
  </li>
</ul>

<h2 id="폭포수-모형waterfall-model-원형-모형">폭포수 모형(Waterfall Model, 원형 모형)</h2>
<ul>
  <li>각 단계를 확실히 매듭짓고 다음 단계를 진행하는 개발 방법론
    <blockquote>
      <p>전통적인 소프트웨어 생명 주기 모형</p>
    </blockquote>
  </li>
</ul>

<h2 id="프로토타입-모형prototype-model-원형-모형">프로토타입 모형(Prototype Model, 원형 모형)</h2>
<ul>
  <li>견본품(Prototype)을 만들어 최종 결과물을 예측하는 모형</li>
</ul>

<h2 id="나선형-모형spiral-model-점진적-모형">나선형 모형(Spiral Model, 점진적 모형)</h2>
<ul>
  <li>여러 번의 소프트웨어 개발 과정을 거쳐 점진적으로 개발하는 모형</li>
</ul>

<p><strong>4가지 주요 활동</strong></p>

<blockquote>
  <p>계획 수립 -&gt; 위험 분석 -&gt; 개발 및 검증 -&gt; 고객 평가 <strong>(계위개고)</strong></p>
</blockquote>

<h2 id="애자일-모형agile-model">애자일 모형(Agile Model)</h2>

<ul>
  <li>
    <p>요구사항 변화에 유연하게 대응할 수 있도록 일정한 주기를 반복하면서 개발하는 모형</p>
  </li>
  <li>
    <p><strong><em>폭포수 모형과 대조적</em></strong></p>
  </li>
  <li>
    <p><strong>대표 모형</strong></p>
    <ul>
      <li>스크럼(Scrum)</li>
      <li>XP(eXtreme Programming)</li>
      <li>칸반(Kanban)</li>
      <li>Lean</li>
      <li>기능 중심 개발(FDD;Feature Driven Development)</li>
    </ul>
  </li>
</ul>

<h2 id="애자일-개발-4가지-핵심-가치">애자일 개발 4가지 핵심 가치</h2>
<ul>
  <li>프로세스와 도구보다는 개인과 상호작용에 더 가치를 둔다.</li>
  <li>방대한 문서보다는 실행되는 SW에 더 가치를 둔다.</li>
  <li>계약 협상보다는 고객과 협업에 더 가치를 둔다.</li>
  <li>계획을 따르기 보다는 변화에 반응하는 것에 더 가치를 둔다.</li>
</ul>

<h2 id="소프트웨어-공학">소프트웨어 공학</h2>
<ul>
  <li>소프트웨어의 위기를 극복하기 위한 방안으로 연구된 학문</li>
  <li>소프웨어 공학의 기본 원칙
    <ul>
      <li>현대적인 프로그래밍 기술을 계속적으로 적용해야 한다.</li>
      <li>개발된 소프트웨어의 품질이 유지되도록 지속적으로 검증해야 한다.</li>
      <li>소프트웨어 개발 관련 사항 및 결과에 대한 명확한 기록을 유지해야 한다.</li>
    </ul>
  </li>
</ul>

<h1 id="2-스크럼scrum-기법">2. 스크럼(Scrum) 기법</h1>

<h2 id="스크럼scrum">스크럼(Scrum)</h2>
<p>팀이 중심이 되어 개발의 효율성을 높이는 기법</p>

<h2 id="스크럼-팀">스크럼 팀</h2>

<table>
  <thead>
    <tr>
      <th>구성원</th>
      <th>역할</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>제품 책임자(PO;Product Owner)</td>
      <td>백로그(Backlog)를 작성<br /> 이해도가 높고, 의사를 결정할 사람</td>
    </tr>
    <tr>
      <td>스크럼 마스터(SM;Scrum Master)</td>
      <td>가이드 역할</td>
    </tr>
    <tr>
      <td>개발팀(DT;Development Team)</td>
      <td>제품 개발을 수행</td>
    </tr>
  </tbody>
</table>

<h2 id="스크럼-개발-프로세스">스크럼 개발 프로세스</h2>

<table>
  <thead>
    <tr>
      <th>프로세스</th>
      <th>내용</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>스프린트 계획 회의(Springt Planning Meeting)</td>
      <td>제품 백로그 중 이번 스프린트에서 수행할 작업을 대상으로 단기 일정을 수립하는 회의</td>
    </tr>
    <tr>
      <td>스프린트(Sprint)</td>
      <td>실제 개발 작업을 진행하는 과정, 2~4주 정도</td>
    </tr>
    <tr>
      <td>일일 스크럼 회의(Daily Scrum Meeting)</td>
      <td>모든 팀원이 약속된 시간에 약 15분 동안 진행 상황을 점검하는 회의&lt;/br&gt;남은 작업 시간은 소멸 차드(Burn-down Chart)에 표시</td>
    </tr>
    <tr>
      <td>스프린트 검토 회의(Sprint Review)</td>
      <td>요구사항에 잘 부합하는지 테스팅</td>
    </tr>
    <tr>
      <td>스프린트 회고(Sprint Retrospective)</td>
      <td>규칙 준수 여부 및 개선할 점을 확인하고 기록</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>계획 -&gt; 진행(스프린트) -&gt; 회의, 검토 -&gt; 회고 순으로 진행</p>
</blockquote>

<h1 id="3-xpextreme-programming-기법">3. XP(eXtreme Programming) 기법</h1>

<h2 id="xpextreme-programming">xp(eXtreme Programming)</h2>

<ul>
  <li>
    <p>요구사항에 유연하게 대응하기 위해 고객의 참여와 개발 과정의 반복을 극대화 하여 생산성을 향상시키는 방법</p>
  </li>
  <li>
    <p>XP의 5가지 핵심 가치 (암기)</p>
    <ul>
      <li>의사소통(Cmmunication)</li>
      <li>단순성(Simplicity)</li>
      <li>용기(Courage)</li>
      <li>존중(Respect)</li>
      <li>피드백(Feedback)</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>용단의피존</p>
</blockquote>

<h2 id="xp-개발-프로세스">xp 개발 프로세스</h2>

<table>
  <thead>
    <tr>
      <th>프로세스</th>
      <th>내용</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>릴리즈 계획 수립<br />(Release Planning)</td>
      <td>부분 혹은 전체 개발 완료 시점에 대한 일정을 수립<br />몇개의 스토리가 적용되어 부분적으로 기능이 완료된 제품을 제공하는 것을 릴리즈라고 함</td>
    </tr>
    <tr>
      <td>이터레이션<br />(Iteration, 주기)</td>
      <td>실제 개발 작업을 진행하는 과정으로, 보통 1~3주 정도의 기간으로 진행됨</td>
    </tr>
    <tr>
      <td>승인 검사<br />(Acceptance Test, 인수 테스트)</td>
      <td>하나의 이터레이션 안에서 부분 완료 제품이 구현되면 수행하는 테스트</td>
    </tr>
    <tr>
      <td>소규모 릴리즈<br />(Small Release)</td>
      <td>요구사항에 유연하게 대응할 수 있도록 릴리즈의 규모를 축소 한 것</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>계획하고 진행한 후 검사하고 출시한다 (진행 -&gt; 이터레이션, 출시 -&gt; 릴리즈)</p>
</blockquote>

<h2 id="xp의-주요-실천-방법practice">xp의 주요 실천 방법(Practice)</h2>

<table>
  <thead>
    <tr>
      <th>실천 방법</th>
      <th>내용</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Pair Programming&lt;div&gt;(짝 프로그래밍)</td>
      <td>다른 사람과 함께 프로그래밍을 수행함으로써 개발에 대한 책임을 공동으로 나눠 갖는 환경을 조성</td>
    </tr>
    <tr>
      <td>Collective Ownership&lt;div&gt;(공동 코드 소유)</td>
      <td>개발 코드에 대한 권한과 책임을 공동으로 소유</td>
    </tr>
    <tr>
      <td>Test-Driven Development&lt;div&gt;(테스트 주도 개발)</td>
      <td>개발자가 실제 코드를 작</td>
    </tr>
    <tr>
      <td>Whole Team&lt;div&gt;(전체 팀)</td>
      <td>개발에 참여하는 모든 구성원(고객 포함)들은 각자 자신의&lt;div&gt;역할이 있고 그 역할에 대한 책임을 가져야 함</td>
    </tr>
    <tr>
      <td>Continuous Integration&lt;div&gt;(계속적인 통합)</td>
      <td>모듈 단위로 나눠서 개발된 코드들은 하나의 작업이 마무리 될 때마다 지속적으로 통합됨</td>
    </tr>
    <tr>
      <td>Refactoring(리팩토링)</td>
      <td>프로그램 기능의 변경 없이 시스템을 재구성함&lt;div&gt;목적 : 프로그램을 쉽게 이해하고 쉽게 수정하여 빠르게 개발할 수 있도록 하기 위함</td>
    </tr>
    <tr>
      <td>Small Release(소규모 릴리즈)</td>
      <td>릴리즈 기간을 짧게 반복함으로써 고객의 요구 변화에 신속히 대응할 수 있음</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>주요 실천 방법은 영문으로도 알고 있어야 함</p>
</blockquote>

<h1 id="4-현행-시스템-파악">4. 현행 시스템 파악</h1>

<table>
  <tr>
    <td>프로세스</td>
    <td>현행 시스템</td>
    <td>내용</td>
  </tr>
  <tr>
    <td rowspan="3">1단계</td>
    <td> 시스템 구성 파악</td>
    <td>조직의 주요 업무를 담당하는 기간 업무와 이를 지원하는 지원 업무로 구분하여 기술</td>
  </tr>
   <tr>
    <td>시스템 기능 파악</td>
    <td>현재 제공하는 기능들을 주요 기능과 하부 기능, 세부 기능으로 구분하여 계층형으로 표시함</td>
  </tr>
  <tr>
    <td>시스템 인터페이스 파악</td>
    <td>단위 업무 시스템 간에 주고받는 데이터의 종류, 형식, 프로토콜, 연계 유형, 주기 등을 명시함</td>
  </tr>
   <tr>
    <td rowspan="2">2단계</td>
    <td>아키텍처 구성 파악</td>
    <td>최상위 수준에서 계층별로 표현한 아키텍처 구성도를 작성함</td>
  </tr>
  <tr>
    <td>소프트웨어 구성 파악</td>
    <td>소프트웨어들의 제품명, 용도, 라이선스 적용 방식, 라이선스 수 등을 명시함</td>
  </tr>
   <tr>
    <td rowspan="2">3단계</td>
    <td>하드웨어 구성 파악</td>
    <td>단위 업무 시스템들이 운용되는 서버의 주요 사양 과 수량, 그리고 서버의 이중화 적용 여부를 명시함</td>
  </tr>
     <tr>
    <td>네트워크 구성 파악</td>
    <td>서버의 위치, 서버 간의 네트워크 연결 방식을 네트워크 구성도로 작성함</td>
  </tr>
</table>

<blockquote>
  <p>시스템의 개발 범위를 명확히 설정하려면 현행 시스텡이 어떻게 구성되어 있는지 파악해야 됨</p>
</blockquote>

<h1 id="5-개발-기술-환경-파악">5. 개발 기술 환경 파악</h1>

<blockquote>
  <p>요구사항 식별 시 고려사항 암기</p>
</blockquote>

<h2 id="개발-기술-환경-파악의-개요">개발 기술 환경 파악의 개요</h2>
<p>개발 하고자 하는 소프트웨어와 관련된 운영체제(OS), 데이터베이스 관리 시스템(DBMS), 미들웨어 등을 선정할 때 고려해야 하 할 사항을 기술하고, 오픈 소스를 사용할 때 주의해야 할 내용을 제시</p>

<h2 id="운영체제os--operating-system">운영체제(OS , Operating System)</h2>

<ul>
  <li>컴퓨터 시스템의 자원을 효율적으로 관리하며, 컴퓨터를 효율적으로 사용할 수 있도록 환경을 제공하는 소프트웨어</li>
  <li>운영체제 관련 요구사항 식별 시 고려사항
    <ul>
      <li>가용성</li>
      <li>성능</li>
      <li>기술 지원</li>
      <li>주변 기기</li>
      <li>구축 비용</li>
    </ul>
  </li>
</ul>

<h2 id="데이터베이스-관리-시스템dbms-database-mangement-system">데이터베이스 관리 시스템(DBMS; DataBase Mangement System)</h2>

<ul>
  <li>
    <p>사용자와 데이터베이스 사이에서 사용자의 요구에 따라 정보를 생성해 주고, 데이터베이스를 관리해 주는 소프트웨어</p>
  </li>
  <li>
    <p>DBMS 관련 요구사항 식별 시 고려사항</p>
    <ul>
      <li>가용성</li>
      <li>성능</li>
      <li>기술 지원</li>
      <li>상호 호환성</li>
      <li>구축 비용</li>
    </ul>
  </li>
</ul>

<h2 id="웹-애플리케이션-서버was-web-application-server">웹 애플리케이션 서버(WAS; Web Application Server)</h2>

<ul>
  <li>
    <p>사용자의 요구에 따라 변하는 동적인 콘텐츠를 처리하기 위해 사용되는 미들웨어</p>
  </li>
  <li>
    <p>웹 애플리케이션 서버 관련 요구사항 식별 시 고려사항
    - 가용성
    - 성능
    - 기술 지원
    - 구축 비용</p>
  </li>
</ul>

<h2 id="오픈-소스-open-source">오픈 소스 (Open Source)</h2>

<ul>
  <li>누구나 별다른 제한 없이 사용할 수 있도록 소스 코드를 공개한 소프트웨어</li>
  <li>웹 애플리케이션 서버 관련 요구사항 식별 시 고려사항
    - 라이선스의 종류
    - 사용자 수
    - 기술의 지속 가능성</li>
</ul>]]></content><author><name>Lee Kyuhwan</name></author><category term="EIP_PS" /><category term="EIP_PS" /></entry><entry><title type="html">정처기 실기 요구사항 확인 6~10</title><link href="http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B801/" rel="alternate" type="text/html" title="정처기 실기 요구사항 확인 6~10" /><published>2022-04-08T00:00:00+09:00</published><updated>2022-04-17T00:00:00+09:00</updated><id>http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B801</id><content type="html" xml:base="http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B801/"><![CDATA[<h1 id="6-요구사항-정의">6. 요구사항 정의</h1>
<blockquote>
  <p>요구사항의 개념을 정리해 두는것이 좋음</p>
  <h2 id="요구사항">요구사항</h2>
  <ul>
    <li>소프트웨어가 어떤 문제를 해결하기 위해 제공하는 서비스에 대한 설명과 운영되는데 필요한 제약 조건</li>
    <li>요구사항의 유형
      <ul>
        <li>기능 요구사항(Functional requirements)</li>
        <li>비기능 요구사항(Non-functional requirements)</li>
        <li>사용자 요구사항(User requirements)</li>
        <li>시스템 요구사항(System requirements)</li>
      </ul>
    </li>
  </ul>
</blockquote>

<h2 id="기능-요구사항functional-requirements">기능 요구사항(Functional requirements)</h2>

<ul>
  <li>기능이나 수행과 관련된 요구사항</li>
</ul>

<h2 id="비기능-요구사항non-functional-requirements">비기능 요구사항(Non-functional requirements)</h2>

<ul>
  <li>품질이나 제약사항과 관련된 요구사항</li>
</ul>

<h2 id="사용자-요구사항user-requirements">사용자 요구사항(User requirements)</h2>

<ul>
  <li>사용자 관점에서 본 시스템이 제공해야 할 요구사항</li>
</ul>

<h2 id="시스템-요구사항system-requirements">시스템 요구사항(System requirements)</h2>

<ul>
  <li>개발자 관점에서 본 시스템 전체가 제공해야 할 요구사항</li>
</ul>

<h1 id="7-요구사항-개발-프로세스">7. 요구사항 개발 프로세스</h1>

<h2 id="요구사항-개발-프로세스">요구사항 개발 프로세스</h2>
<p>요구사항을 체계적으로 도출하고 분석한 후 명세서에 정리한 다음 확인 및 검증하는 일련의 구조화된 활동</p>

<blockquote>
  <p>도출(Elicitation)  -&gt; 분석(Analysis) -&gt; 명세(Specification) -&gt; 확인(Validation)
도분명확</p>
</blockquote>

<h2 id="요구사항-도출requirement-elicitation-요구사항-수집">요구사항 도출(Requirement Elicitation, 요구사항 수집)</h2>
<ul>
  <li>시스템 개발에 관련된 사람들이 서로 의견을 교환하여 요구사항을 어떻게 수집할 것인지를 식별하고 이해하는 과정</li>
  <li>요구사항을 도출하는 주요 기법
    <ul>
      <li>청취와 인터뷰</li>
      <li>설문</li>
      <li>브레인스토밍</li>
      <li>워크샵</li>
      <li>프로토타이핑</li>
      <li>유스케이스</li>
    </ul>
  </li>
</ul>

<h2 id="요구사항-분석requirement-analysis">요구사항 분석(Requirement Analysis)</h2>
<ul>
  <li>요구사항 중 명확하지 않거나 모호하여 이해되지 않는 부분을 발견하고 이를 걸러내기 위한 과정</li>
  <li>사용되는 대표적인 도구
    <ul>
      <li>자료 흐름도(DFD)</li>
      <li>자료 사전(DD)</li>
    </ul>
  </li>
</ul>

<h2 id="요구사항-명세requirement-specification">요구사항 명세(Requirement Specification)</h2>
<ul>
  <li>분석된 요구사항을 바탕으로 모델을 작성하고 문서화하는 것</li>
</ul>

<h2 id="요구사항-확인requirement-validation-요구사항-검증">요구사항 확인(Requirement Validation, 요구사항 검증</h2>
<ul>
  <li>요구사항 명세서가 정확하고 완전하게 작성되었는지를 검토하는 활동</li>
</ul>

<h2 id="요구공학requirements-engineering">요구공학(Requirements Engineering)</h2>
<ul>
  <li>요구사항을 정의하고, 분석 및 관리하는 프로세스를 연구하는 학문</li>
</ul>

<h2 id="요구사항-명세-기법">요구사항 명세 기법</h2>

<table>
  <tr>
    <td>구분</td>
    <td>정형 명세 기법</td>
    <td>비정형 명세 기법</td>
  </tr>
  
  <tr>
    <td>기법</td>
    <td>수학적 원리 기반, 모델 기반</td>
    <td>상태/ 기능/ 객체 중심</td>
  </tr>
  
  <tr>
    <td>작성 방법</td>
    <td>수학적 기호, 정형화된 표기법</td>
    <td>일반 명사, 동사 등의 자연어를 기반으로 서술 또는 다이어그램으로 작성</td>
  </tr>
  
  <tr>
    <td>특징</td>
    <td>요구사항을 정확하고 간결하게 표현할 수 있음 <br />요구사항에 대한 결과가 작성자에 관계없이 일관성이 있으므로 완전성 검증이 가능함<br />표기법이 어려워 사용자가 이해하기 어려움</td>
    <td>자연어의 사용으로 인해 요구사항에 대한 결과가 작성자에 따라 다를 수 있어 일관성이 떨어지고, 해석이 달라질 수 있음<br />내용의 이해가 쉬어 의사소통이 용이함</td>
  </tr>
  
  <tr>
    <td>종류</td>
    <td>VDM, Z, Petri-net, CSP 등</td>
    <td>FSM, Decision Table, ER모델링, State Chart(SADT) 등</td>
  </tr>
</table>

<h1 id="8-요구사항-분석">8. 요구사항 분석</h1>

<h2 id="요구사항-분석requirement-analysis-1">요구사항 분석(Requirement Analysis)</h2>

<ul>
  <li>개발 대상에 대한 사용자의 요구사항을 이해하고 문서화 하는 활동을 의미</li>
</ul>

<h2 id="구조적-분석-기법">구조적 분석 기법</h2>

<ul>
  <li>
    <p>자료의 흐름과 처리를 중심으로 하는 요구사항 분석 방법</p>
  </li>
  <li>
    <p>주요 구조적 분석 기법 도구 (암기)</p>

    <ul>
      <li>자료 흐름도(DFD)</li>
      <li>자료 사전(DD)</li>
      <li>소단위 명세서(Mini-Spec.)</li>
      <li>개체 관계도(ERD)</li>
      <li>상태 전이도(STD)</li>
      <li>제어 명세서</li>
    </ul>
  </li>
</ul>

<h2 id="자료-흐름드dfd-datea-flow-diagram">자료 흐름드(DFD; Datea Flow Diagram)</h2>

<ul>
  <li>자료의 흐름 및 변환 과정과 기능을 도형 중심으로 기술하는 방법</li>
</ul>

<h2 id="자료-흐름도-기본-기호">자료 흐름도 기본 기호</h2>

<table>
  <tr>
    <td rowspan="2">기호</td>
    <td rowspan="2">의미</td>
    <td colspan="2">표기법</td>
    
  </tr>
  
  <tr>
    <td>Yourdon/ DeMacro</td>
    <td>Gane/ Sarson</td>
  </tr>
  
  <tr>
    <td>프로세스(Process)</td>
    <td>자료를 변환시키는 시스템의 한 부분(처리과정)을 나타내며 처리, 기능, 변환, 버블이라고고도 함</td>
    <td><image src="https://user-images.githubusercontent.com/93482597/163679391-0e88b373-45b8-4440-9db1-7463f5394eb3.png" with="60px" heigh="60px"></image></td>
    <td><image src="https://user-images.githubusercontent.com/93482597/163679419-071103c1-1689-438a-a7c6-f06dae64e368.png" with="60px" heigh="60px"></image>
    </td>
  </tr>
  
  <tr>
    <td>자료 흐름(Data Flow)</td>
    <td>자료의 이동(흐름)이나 연관관계를 나타냄</td>
    <td colspan="2"><image src="https://user-images.githubusercontent.com/93482597/163679476-72c9b1bd-1b99-47bb-ab73-44f273099449.png" with="60px" heigh="60px"></image>
    </td>
  </tr>
  
  <tr>
    <td>자료 저장소(Terminator)</td>
    <td>시스템에서의 자료 저장소(파일, 데이터베이스)를 나타냄</td>
    <td> <image src="https://user-images.githubusercontent.com/93482597/163679530-97939946-a208-465a-99ac-b06690dcc0d6.png" with="60px" heigh="60px"></image>
    </td>
    <td> <image src="https://user-images.githubusercontent.com/93482597/163679663-0d76bec7-32ef-4c88-87ec-71ef3fdba785.png" with="60px" heigh="60px"></image></td>
  </tr>

  <tr>
    <td>단말(Terminator)</td>
    <td>시스템과 교신하는 외부 개체로, 입력 데이터가 만들어지고 출력 데이터를 받음</td>
    <td> <image src="https://user-images.githubusercontent.com/93482597/163679703-8c76a146-91f9-46b7-92df-21139656bfb2.png"></image></td>
    <td> <image src="https://user-images.githubusercontent.com/93482597/163679709-7d3aba52-aefa-4658-a1f8-f2b955e89dd9.png"></image></td>
  </tr>
      </table>

<h2 id="자료-사전dd-data-dictionary">자료 사전(DD; Data Dictionary)</h2>

<ul>
  <li>
    <p>자료의 흐름도에 있는 자료를 정의하고 기록한 것</p>
  </li>
  <li>
    <p>자료 사전에서 사용되는 표기 기호</p>
  </li>
</ul>

<table>

  <tr>
    <td>기호</td>
    <td>의미</td>
  </tr> 
  
  <tr>
    <td>=</td>
    <td> 자료의 정의 : ~로 구성되어 있다(is composed of)</td>
  </tr> 
 
  <tr>
    <td>+</td>
    <td> 자료의 연결 : 그리고(and)</td>
  </tr> 
      
  <tr>
    <td>(  )</td>
    <td> 자료의 생략 : 생략 가능한 자료(Optional)</td>
  </tr> 
      
  <tr>
    <td>[  ]</td>
    <td> 자료의 선택 : 또는(or)</td>
  </tr> 
      
  <tr>
    <td>{  }</td>
    <td> 자료의 반복 : Iteration of <br /> <image src="https://user-images.githubusercontent.com/93482597/163680303-d45b3fb1-f5eb-41d3-8353-345d4c0455be.png " with="60" height="60"> : n번 이상 반복 </image> <br /><image src="https://user-images.githubusercontent.com/93482597/163680300-7fe7ae4c-7719-42b0-b159-d222da00bda5.png" with="60" height="60"> : 최대로 n번 반복 </image> <br /> <image src="https://user-images.githubusercontent.com/93482597/163680299-ce091380-a147-4bf6-8b89-5dce33e1acf8.png" with="60px" height="60px"> </image> : m 이상  n 이하로 반복</td>
  </tr> 
      
<tr>
    <td>"  "</td>
    <td> 자료의 설명 : 주석(Comment)</td>
</tr> 
</table>

<h1 id="9-요구사항-분석case와-hipo">9. 요구사항 분석CASE와 HIPO</h1>

<h2 id="요구사항-분석용-case자동화-도구">요구사항 분석용 CASE(자동화 도구)</h2>

<ul>
  <li>
    <p>요구사항을 자동으로 분석하고, 요구사항 분석 명세서를 기술하도록 개발된 도구</p>
  </li>
  <li>
    <p>대표적인 요구사항 분석용 CASE</p>
  </li>
</ul>

<table>
  <tr>
    <td>SADT</td>
    <td>
      시스템 정의, 소프트웨어 요구사항 분석, 시스템/소프트웨어 설계를 위한 도구 <br />SoftTech 사에서 개발<br />구조적 요구 분석을 하기 위해 블록 다이어그램을 채택한 자동화 도구
    </td>
  </tr>

   <tr>
    <td>SREM = RSL/REVS</td>
    <td>TRW 사가 실시간 처리 소프트웨어 시스템에서 요구사항을 명확히 기술하도록 할 목적으로 개발한 도구<br />RSL과 REVS를 사용하는 자동화 도구</td>
  </tr>

   <tr>
    <td>PSL/PSA</td>
    <td>PSL과 PSA를 사용하는 자동화 도구<br />미시간 대학에서 개발</td>
  </tr>

   <tr>
    <td>TAGS</td>
    <td>시스템 공학 방법 응용에 대한 자동 접근 방법<br />개발 주기의 전 과정에 이용할 수 있는 자동화 도구</td>
  </tr>
</table>

<blockquote>
  <p>도구의 종류와 각각의 의미를 정확하게 암기 (SSPPT)</p>
</blockquote>

<h2 id="hipohierarchy-input-process-output">HIPO(Hierarchy Input Process Output)</h2>

<ul>
  <li>
    <p>시스템 실행 과정인 입력, 처리, 출력의 기능을 표현한 것</p>
  </li>
  <li>
    <p>하향식 소프트웨어 개발을 위한 문서화 도구</p>
  </li>
</ul>

<h1 id="10-umlunified-modeling-language의-개요">10. UML(Unified Modeling Language)의 개요</h1>

<h2 id="umlunified-modeling-language">UML(Unified Modeling Language)</h2>
<p>시스템 개발 과정에서 의사소통이 원활하게 이루어지도록 표준화한 대표적인 객체지향 모델링 언어이다.</p>

<ul>
  <li>UML의 구성요소
    <ul>
      <li>사물(Things)</li>
      <li>관계(Relationships)</li>
      <li>다이어그램(Diagram)</li>
    </ul>
  </li>
</ul>

<h2 id="사물-things">사물 (Things)</h2>

<ul>
  <li>
    <p>다이어그램 안에서 형성될 수 있는 대상들</p>
  </li>
  <li>
    <p>사물의 종류</p>
  </li>
</ul>
<table>
  <tr>
    <td>사물</td>
    <td>내용</td>
  </tr>

  <tr>
    <td>구조 사물<br />(Structural Things)</td>
    <td>시스템의 개념적, 물리적 요소를 표현<br />클래스(Class), 유스케이스(Use Case), 컴포넌트(Component), 노드(Node) 등</td>
  </tr>

  <tr>
    <td>행동 사물<br />(Behavioral Things)</td>
    <td>시간과 공간에 따른 요소들의 행위를 표현<br />상호작용(Interaction), 상태 머신(State Machine)등</td>
  </tr>

  <tr>
    <td>그룹 사물<br />(Grouping Things)</td>
    <td>요소들을 그룹으로 묶어서 표현<br />패키지(Package)</td>
  </tr>

  <tr>
    <td>주해 사물<br />(Annotation Things)</td>
    <td>부가적인 설명이나 제약조건 등을 표현<br />노트(Note)</td>
  </tr>

</table>]]></content><author><name>Lee Kyuhwan</name></author><category term="EIP_PS" /><category term="EIP_PS" /></entry></feed>