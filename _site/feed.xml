<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-05-04T17:33:15+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">NonamedBread</title><subtitle>An amazing website.</subtitle><author><name>Lee Kyuhwan</name></author><entry><title type="html">노드 &amp;amp; API</title><link href="http://localhost:4000/blockchain_theory/Node&API/" rel="alternate" type="text/html" title="노드 &amp;amp; API" /><published>2022-05-03T00:00:00+09:00</published><updated>2022-05-03T00:00:00+09:00</updated><id>http://localhost:4000/blockchain_theory/Node&amp;API</id><content type="html" xml:base="http://localhost:4000/blockchain_theory/Node&amp;API/"><![CDATA[<h2 id="블록체인에서의-노드">블록체인에서의 노드</h2>

<p>전 세계적으로 존재하는 서버들을 노드(Node)라고 한다.
여기서 블록체인의 노드는 트리 구조로 구성되어 있다
기능과 필요에 따라 종류와 형태가 구별되며, 노드는 트랜잭션을 제안하고 검증을 할 수 있으며, 합의를 이루고, 블록체인을 보호하기 위해 채굴(Mining)을 수행</p>

<blockquote>
  <p>프라이빗 블록체인(Private blockchain) 또는 하이퍼레저 패브릭의 멤버쉽 서비스 같은 폐쇄형 블록체인 네트워크에서는 계정 역할의 노드(Node)가 꼭 필요하다.</p>
</blockquote>

<h2 id="노드의-종류">노드의 종류</h2>

<ul>
  <li>지갑(wallet)</li>
  <li>풀 노드(Full node)</li>
  <li>라이트 노드(Light node)</li>
  <li>SPV(Simple Payment Verification)</li>
  <li>마스터 노드(Master node)</li>
  <li>채굴 노드(Mining node)</li>
  <li>랜덤노드(Random node)</li>
  <li>엔드포인트 노드(Endpoint node) (구)레인저 노드(Ranger node)</li>
  <li>합의 노드(CN; Consensus nodes)</li>
  <li>슈퍼 노드(Super node) or 대표 노드(Representative node)</li>
  <li>히스토리 노드(History node)</li>
</ul>]]></content><author><name>Lee Kyuhwan</name></author><category term="Blockchain_theory" /><category term="Blockchain_theory" /></entry><entry><title type="html">암호화 &amp;amp; 합의 알고리즘</title><link href="http://localhost:4000/blockchain_theory/Encryption_consensus_algorithm/" rel="alternate" type="text/html" title="암호화 &amp;amp; 합의 알고리즘" /><published>2022-04-26T00:00:00+09:00</published><updated>2022-04-26T00:00:00+09:00</updated><id>http://localhost:4000/blockchain_theory/Encryption_consensus_algorithm</id><content type="html" xml:base="http://localhost:4000/blockchain_theory/Encryption_consensus_algorithm/"><![CDATA[<h1 id="암호화-기술과-보안">암호화 기술과 보안</h1>

<p>블록체인은 분산처리와 동시에 암호화 기술을 적용하여 높은 보안성을 확보한 기술이다. 보안성으로 인해 현재 금융업에서 다양한 분야에 빠르게 적용되고 있다</p>

<h1 id="블록체인-보안적-특징">블록체인 보안적 특징</h1>

<h3 id="기존-데이터베이스와-차이점">기존 데이터베이스와 차이점</h3>

<h3 id="무결성">무결성</h3>

<p>기존 데이터 베이스와 다르게 블록체인은 분산 시스템이기 때문에 각 노드들이 가지고 있는 사본을 통해 다른 노드에 문제가 발생해도 전체 블록체인 네트워크의 무결성은 보장된다.</p>

<h3 id="비가역성">비가역성</h3>

<p>블록체인 기술은 중앙 통제 방식이 아닌 분산 데이터 저장 방식시이 깨문에 단일 공격 지점이 없어 데이터 위변조 위험이 차단된다.</p>

<h2 id="보안적-특징">보안적 특징</h2>

<ol>
  <li>데이터 무결성
합의 알고리즘을 통해 데이터의 정확성과 일관성을 유지(무결성)</li>
  <li>거래 투명성
퍼블릭 블록체인의 경우 네트워크에 접속해 트랜잭션의 기록을 확인할 수 있다.</li>
  <li>감시 가능성
Hashing 기술을 통해 블록에 담겨 있는 트랙잭션이나 데이터는 수정할 수 없다. 만약 트랜잭션에 변경이 일어나면 머클 해시 값이 변경되어 위변조 시도를 바로 발견할 수 있다.</li>
</ol>

<h2 id="해시-함수">해시 함수</h2>

<p>해싱(Hashing)</p>]]></content><author><name>Lee Kyuhwan</name></author><category term="Blockchain_theory" /><category term="Blockchain_theory" /></entry><entry><title type="html">2.데이터 입출력 구현 31~40</title><link href="http://localhost:4000/eip_ps/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9E%85%EC%B6%9C%EB%A0%A5%EA%B5%AC%ED%98%8400/" rel="alternate" type="text/html" title="2.데이터 입출력 구현 31~40" /><published>2022-04-25T00:00:00+09:00</published><updated>2022-04-25T00:00:00+09:00</updated><id>http://localhost:4000/eip_ps/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9E%85%EC%B6%9C%EB%A0%A5%EA%B5%AC%ED%98%8400</id><content type="html" xml:base="http://localhost:4000/eip_ps/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9E%85%EC%B6%9C%EB%A0%A5%EA%B5%AC%ED%98%8400/"><![CDATA[<h1 id="31-데이터-전환">31. 데이터 전환</h1>

<h2 id="데이터-전환">데이터 전환</h2>

<ul>
  <li>현재 운영 중인 시스템의 데이터를 추출하고 이를 변환한 후 새로운 개발 시스템에서 사용할 수 있도록 적재하는 과정</li>
</ul>

<h2 id="데이터-전환-계획서">데이터 전환 계획서</h2>

<ul>
  <li>데이터 전환에 필요한 모든 계획을 기록하는 문서</li>
</ul>

<h1 id="32-데이터-검증">32. 데이터 검증</h1>

<h2 id="데이터-검증">데이터 검증</h2>

<ul>
  <li>원천 시스템의 데이터를 목적 시스템의 데이터로 전환하는 과정이 정상적으로 수행 되었는지 여르를 확인하는 과정</li>
</ul>

<h2 id="검증-방법에-따른-분류">검증 방법에 따른 분류</h2>

<table>
  <thead>
    <tr>
      <th>검증 방법</th>
      <th>내용</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>로그검증</td>
      <td>데이터 전환 과정에서 작성하는 추출, 전환, 적재 로그를 검증</td>
    </tr>
    <tr>
      <td>기본 항목 검증</td>
      <td>로그 검증 외에 별도로 요청된 검증 항목에 대해 검증</td>
    </tr>
    <tr>
      <td>응용 프로그램 검증</td>
      <td>응용 프로그램을 통한 데이터 전환의 정합성을 검증</td>
    </tr>
    <tr>
      <td>응용 데이터 검증</td>
      <td>사전에 정의된 업무 규칙을 기준으로 데이터 전환의 정합성을 검증</td>
    </tr>
    <tr>
      <td>값 검증</td>
      <td>숫자 항목의 합계 검증, 코드 데이터의 범위 검증, 속성 변경에 따른 값 검증</td>
    </tr>
  </tbody>
</table>

<h1 id="33-오류-데이터-측정-및-정제">33. 오류 데이터 측정 및 정제</h1>

<blockquote>
  <p>오류상태, 데이터 정제 요청서, 데이터 정제보고서에 대해 학습</p>
</blockquote>

<h2 id="오류-데이터-측정-및-정제">오류 데이터 측정 및 정제</h2>

<ul>
  <li>고품질의 데이터를 운영 및 관리 하기 위해 수행</li>
</ul>

<table>
  <thead>
    <tr>
      <th>진행 과정</th>
      <th>내용</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>데이터 품질 분석</td>
      <td>오류 데이터를 찾기 위해 원천 및 목적 시스템 데이터의 정합성 여부를 확인하는 작업</td>
    </tr>
    <tr>
      <td>오류 데이터 측정</td>
      <td>데이터 품질 분석을 기반으로 정상 데이터와 오류 데이터의 수를 측정하여 오류 관리 목록을 작성</td>
    </tr>
    <tr>
      <td>오류 데이터 정제</td>
      <td>오류 관리 목록의 각 항목을 분석하여 원천 데이터를 정제하거나 전환 프로그램을 수정</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>위에서 아래 순으로 진행 (데오오)</p>
</blockquote>

<h2 id="오류-상태">오류 상태</h2>

<table>
  <thead>
    <tr>
      <th> </th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Open</td>
      <td>오류가 보고만 되고 분석되지 않은 상태</td>
    </tr>
    <tr>
      <td>Assigned</td>
      <td>오류의 영향 분석 및 수정을 위해 개발자에게 오류를 전달한 상태</td>
    </tr>
    <tr>
      <td>Fixed</td>
      <td>개발자가 오류를 수정한 상태</td>
    </tr>
    <tr>
      <td>Closed</td>
      <td>수정된 오류에 대해 테스트를 다시 했을 때 오류가 발견되지 않은 상태</td>
    </tr>
    <tr>
      <td>Deferred</td>
      <td>오류 수정을 연기한 상태</td>
    </tr>
    <tr>
      <td>Clarified/Classified</td>
      <td>보고된 오류를 관련자들이 확인 했을 때 오류가 아니라고 확인된 상태</td>
    </tr>
  </tbody>
</table>

<h2 id="데이터-정제요청서">데이터 정제요청서</h2>

<ul>
  <li>데이터 정제와 관련된 전반적인 내용을 문서로 작성한 것</li>
</ul>

<h2 id="데이터-정제보고서">데이터 정제보고서</h2>

<ul>
  <li>정제된 원천 데이터가 정상적으로 정제 되었는지 확인한 결과를 문서로 작성한 것</li>
</ul>

<h1 id="34-데이터베이스-개요">34. 데이터베이스 개요</h1>

<h2 id="데이터-저장소">데이터 저장소</h2>

<ul>
  <li>데이터들을 논리적인 구조로 조직화하거나, 물리적인 공간에 구축한 것을 의미</li>
</ul>

<h2 id="데이터베이스database">데이터베이스(Database)</h2>

<ul>
  <li>공동으로 사용될 데이터를 중복을 배제하여 통합하고, 저장장치에 저장하여 항상 사용할 수 있도록 운영하는 운영 데이터</li>
</ul>

<h2 id="dbmsdatabase-management-system-데이터베이스-관리-시스템">DBMS(DataBase Management System; 데이터베이스 관리 시스템)</h2>

<ul>
  <li>
    <p>사용자의 요구에 따라 정보를 생성해주고, 데이터베이스를 관리해주는 소프트웨어</p>
  </li>
  <li>
    <p>필수기능 3가지</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>정의(Definition</td>
      <td>데이터의 형(Type)과 구조에 대해한 저의, 이용방식, 제약 조건등을 명시하는 기능</td>
    </tr>
    <tr>
      <td>조작(Manipulation)</td>
      <td>데이터 검색, 갱신, 삽입, 삭제 등을 위해 인터페이스 수단을 제공하는 기능</td>
    </tr>
    <tr>
      <td>제어(Control)</td>
      <td>데이터의 무결성, 보안, 권한 검사, 병행 제어를 제공하는 기능</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>정조제</p>
</blockquote>

<h2 id="데이터의-독립성">데이터의 독립성</h2>

<table>
  <thead>
    <tr>
      <th> </th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>논리적 독립성</td>
      <td>응용 프로그램과 데이터베이스를 독립시킴으로써, 데이터의 논리적 구조를 변경시키더라도 응용 프로그램은 영향을 받지 않음</td>
    </tr>
    <tr>
      <td>물리적 독립성</td>
      <td>응용 프로그램과 보조기억장치 같은 물리적 장치를 독립시킴으로써, 디스크를 추가?변경하더라도 응용 프로그램은 영향을 받지 않음</td>
    </tr>
  </tbody>
</table>

<h2 id="스키마schema">스키마(Schema)</h2>
<ul>
  <li>데이터베이스의 구조와 제약조건에 관한 전반적인 명세를 기술한 것</li>
</ul>

<blockquote>
  <p>3계층 개념 명확히</p>
</blockquote>

<table>
  <thead>
    <tr>
      <th>종류</th>
      <th>내용</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>외부 스키마</td>
      <td>사용자나 응용 프로그래머가 각 개인의 입장에서 필요로 하는 데이터베이스의 논리적 구조를 정의한 것</td>
    </tr>
    <tr>
      <td>개념 스키마</td>
      <td>데이터베이스의 전체적인 논리적 구조</td>
    </tr>
    <tr>
      <td>내부 스키마</td>
      <td>물리적 저장장치의 입장에서 본 데이터베이스 구조</td>
    </tr>
  </tbody>
</table>

<h1 id="35-데이터베이스-설계">35. 데이터베이스 설계</h1>

<blockquote>
  <p>설계 순서와 각 단계별 특징 중요</p>
</blockquote>

<h2 id="데이터베이스-설계-순서">데이터베이스 설계 순서</h2>

<ol>
  <li>
    <p>요구 조건 분석 : 요구 조건 명세서 작성</p>
  </li>
  <li>
    <p>개념적 설계 : 개념 스키마, 트랜잭션 모델링, E-R 모델</p>
  </li>
  <li>
    <p>논리적 설계 : 목표 DBMS에 맞는 논리 스키마 설계, 트랜잭션 인터페이스 설계</p>
  </li>
  <li>
    <p>물리적 설계 : 목표 DBMS에 맞는 물리적 구조의 데이터로 변환</p>
  </li>
  <li>
    <p>구현 : 목표 DBMS의 DDL(데이터 정의어)로 데이터베이스 생성, 트랜잭션 작성</p>
  </li>
</ol>

<blockquote>
  <p>요개논물구</p>
</blockquote>

<h2 id="요구-조건-분석">요구 조건 분석</h2>

<ul>
  <li>데이터베이스가 필요한 용도를 파악 하는 것</li>
</ul>

<h2 id="개념적-설계정보-모델링-개념화">개념적 설계(정보 모델링, 개념화)</h2>

<ul>
  <li>현실 세계에 대한 인식을 추상적 개념으로 표현하는 과정</li>
</ul>

<h2 id="논리적-설계데이터-모델링">논리적 설계(데이터 모델링)</h2>

<p>현실 세계에서 발생하는 자료를 특정 DBMS가 지원하는 논리적 자료 구조로 변환(mapping)시키는 과정</p>

<h2 id="물리적-설계데이터-구조화">물리적 설계(데이터 구조화)</h2>

<ul>
  <li>논리적 구조로 표현된 데이터를 물리적 구조의 데이터로 변환하는 과정</li>
</ul>

<h2 id="데이터베이스-구현">데이터베이스 구현</h2>

<ul>
  <li>논리적 설계와 물리적 설계에서 도출된 데이터베이스 스키마를 파일로 생성하는 과정</li>
</ul>

<h1 id="36-데이터-모델의-개념">36. 데이터 모델의 개념</h1>

<blockquote>
  <p>데이터 모델, 구성요소, 종류, 표시할 요소 등에 대한 개념 기억</p>
</blockquote>

<h2 id="데이터-모델">데이터 모델</h2>

<p>현실 세계의 정보들을 체계적으로 표현한 개념적 모형</p>

<h2 id="개념적-데이터-모델">개념적 데이터 모델</h2>

<ul>
  <li>현실 세계에 대한 인가느이 이해를 돕기 위해 현실 세계에 대한 인식을 추상적 개념으로 표현하는 과정</li>
</ul>

<h2 id="논리적-데이터-모델">논리적 데이터 모델</h2>

<ul>
  <li>개념적 구조를 컴퓨터의 세계의 환경에 맞도록 변환하는 과정</li>
</ul>

<h2 id="데이터-모델에-표시할-요소">데이터 모델에 표시할 요소</h2>

<table>
  <thead>
    <tr>
      <th>요소</th>
      <th>내용</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>구조(Structure)</td>
      <td>논리적으로 표현된 개체 타입들 간의 관계로서 데이터 구조 및 정적 성질 표현</td>
    </tr>
    <tr>
      <td>연산(Operation)</td>
      <td>데이터베이스에 저장된 실제 데이터를 처리하는 작업에 대한 명세로서 데이터베이스를 조작하는 기본 도구</td>
    </tr>
    <tr>
      <td>제약 조건(Constraint)</td>
      <td>데이터베이스에 저장될 수 있는 실제 데이터의 논리적인 제약 조건</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>구조, 연산, 제약 조건의 의미 기억 (구연제)</p>
</blockquote>

<h1 id="37-데이터-모델의-구성요소">37. 데이터 모델의 구성요소</h1>

<blockquote>
  <p>개속관 개념 숙지</p>
</blockquote>

<h2 id="개체entity">개체(Entity)</h2>

<ul>
  <li>데이터베이스에 표현하려는 개념이나 정보 단위 같은 현실 세계의 대상체</li>
</ul>

<h2 id="속성attribute">속성(Attribute)</h2>

<ul>
  <li>데이터베이스를 구성하는 가장 작은 논리적 단위</li>
</ul>

<h2 id="속성의-특성에-따른-분류">속성의 특성에 따른 분류</h2>

<table>
  <thead>
    <tr>
      <th>분류</th>
      <th>내용</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>기본 속성(Basic Attribute)</td>
      <td>업무 분석을 통해 정의한 속성<br />속성 중 가장 많고 일반적임</td>
    </tr>
    <tr>
      <td>설계 속성(Designed Attribute)</td>
      <td>원래 업무상 존재하지 않고 설계 과정에서 도출해내는 속성</td>
    </tr>
    <tr>
      <td>파생 속성(Derived Attribute)</td>
      <td>다른 속성으로부터 계산이나 변형 등의 영향을 받아 발생하는 속성</td>
    </tr>
  </tbody>
</table>

<h2 id="관계relationship">관계(Relationship)</h2>

<ul>
  <li>개체와 개체 사이의 논리적인 연결</li>
</ul>

<h2 id="관계의-형태">관계의 형태</h2>

<table>
  <thead>
    <tr>
      <th>형태</th>
      <th>내용</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>일 대 일(1:1)</td>
      <td>개체 집합 A의 각 원소가 개체 집합 B의 원소 한개와 대응하는 관계</td>
    </tr>
    <tr>
      <td>일 대 다(1:N)</td>
      <td>개체 집합A의 각 원소는 개체 집합 B의 원소 여러개와 대응하고 있지만, 개체 집합 B의 각 원소는 개체 집합 A의 원소 한 개와 대응하는 관계</td>
    </tr>
    <tr>
      <td>다 대 다(N:M)</td>
      <td>개체 집합 A의 원소는 개체 집합 B의 원소 여러개와 대응하고, 개체 집합 B의 각 원소도 개체 집합 A의 원소 여러개와 대응하는 관계</td>
    </tr>
  </tbody>
</table>

<h1 id="38-식별자identifier">38. 식별자(identifier)</h1>

<blockquote>
  <p>식별자의 종류, 특징 기억</p>
</blockquote>

<h2 id="식별자">식별자</h2>

<p>하나의 개체 내에서 인스턴스를 유일(Unique)하게 구분할 수 있는 구분자</p>

<h2 id="식별자의-분류">식별자의 분류</h2>

<table>
  <thead>
    <tr>
      <th>분류</th>
      <th>식별자</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>대표성 여부</td>
      <td>주 식별자(Primary Identifier) : 개체를 대표하는 유일한 식별자<br />보조 식별자(Alternate Identifier) : 주 식별자를 대신하여 개체를 식별할 수 있는 속성</td>
    </tr>
    <tr>
      <td>스스로 생성 여부</td>
      <td>내부 식별자(Internal Identifier) : 개체 내에서 스스로 만들어지는 식별자<br />외부 식별자(Foreign Identifier) : 다른 개체와의 관계(Relationship)에 의해 외부 개체의 식별자를 가져와 사용하는 식별자</td>
    </tr>
    <tr>
      <td>단일 속성 여부</td>
      <td>단일 식별자(Single Identifier) : 주 식별자가 한 가지 속성으로만 구성된 식별자<br />복합 식별자(Composit Identifier) : 주 식별자가 두개 이상의 속성으로 구성된 식별자</td>
    </tr>
    <tr>
      <td>대체 여부</td>
      <td>원조 식별자(Original Identifier) : 업무에 의해 만들어지는 가공되지 않은 원래의 식별자(본질 식별자)<br />대리 식별자(Surrogate Identifier) : 주 식별자의 속성이 두 개 이상인 경우 속성들을 하나의 속성으로 묶어 사용하는 식별자(인조 식별자)</td>
    </tr>
  </tbody>
</table>

<h2 id="후보-식별자">후보 식별자</h2>

<ul>
  <li>개체에서 각 인스턴스를 유일하게 식별할 수 있는 속성 또는 속성 집합</li>
</ul>

<h2 id="주-식별자의-특징">주 식별자의 특징</h2>

<table>
  <thead>
    <tr>
      <th>특징</th>
      <th>내용</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>유일성</td>
      <td>개체 내의 모든 인스턴스들은 주 식별자에 의해 유일하게 구분되어야 함</td>
    </tr>
    <tr>
      <td>최소성</td>
      <td>유일성을 만족시키기에 필요한 최소한의 속성으로만 구성되어야 함</td>
    </tr>
    <tr>
      <td>불변성</td>
      <td>주 식별자가 특정 개체에 한 번 지정되면 그 식별자는 변하지 않아야 함</td>
    </tr>
    <tr>
      <td>존재성</td>
      <td>주 식별자가 지정되면 식별자 속성에 반드시 데이터 값이 존재해야 함</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>유최불존</p>
</blockquote>

<h1 id="39-e-r개체-관계-모델">39. E-R(개체-관계) 모델</h1>

<blockquote>
  <p>개념과 특징 숙지</p>
</blockquote>

<h2 id="e-rentity-relationship-개체-관계-모델">E-R(Entity-Relationship, 개체-관계) 모델</h2>

<p>개체와 개체 간의 관계를 기본 요소로 이용하여 현실 세계의 무질서한 데이터를 개념적인 논리 데이터로 표현하기 위한 방법</p>

<h2 id="e-r-다이어그램">E-R 다이어그램</h2>

<table>
  <thead>
    <tr>
      <th>기호 이름</th>
      <th>의미</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>사각형</td>
      <td>개체(Entity) 타입</td>
    </tr>
    <tr>
      <td>마름모</td>
      <td>관계(Relationship) 타입</td>
    </tr>
    <tr>
      <td>타원</td>
      <td>속성(Attribute)</td>
    </tr>
    <tr>
      <td>이중 타원</td>
      <td>다중값 속성(복합 속성)</td>
    </tr>
    <tr>
      <td>밑줄 타원</td>
      <td>기본키 속성</td>
    </tr>
    <tr>
      <td>복수 타원</td>
      <td>복합 속성</td>
    </tr>
    <tr>
      <td>관계</td>
      <td>1:1, 1:N, N:M 등의 개체 간 관계에 대한 대응수를 선위에 기술</td>
    </tr>
    <tr>
      <td>선, 링크</td>
      <td>개체 타입과 속성을 연결</td>
    </tr>
  </tbody>
</table>

<h1 id="40-관계형-데이터베이스의-구조-관계형-데이터-모델">40. 관계형 데이터베이스의 구조/ 관계형 데이터 모델</h1>

<blockquote>
  <p>릴레이션을 구성하는 요소</p>
</blockquote>

<h2 id="관계형-데이터베이스">관계형 데이터베이스</h2>

<ul>
  <li>2차원적인 표(Table)을 이용해서 데이터 상호 관계를 정의하는 데이터 베이스</li>
</ul>

<h2 id="관계형-데이터베이스의-릴레이션-구조">관계형 데이터베이스의 릴레이션 구조</h2>

<image src="https://user-images.githubusercontent.com/93482597/166637476-087cfbe7-9a11-43d5-97d0-115ec157d2a6.png"></image>

<h2 id="튜플tuple">튜플(Tuple)</h2>

<ul>
  <li>릴레이션을 구성하는 각각의 행</li>
</ul>

<h2 id="속성attribute-1">속성(Attribute)</h2>

<ul>
  <li>데이터베이스를 구성하는 가장 작은 논리적 단위</li>
</ul>

<h2 id="도메인domain">도메인(Domain)</h2>

<ul>
  <li>하나의 애트리뷰트가 취할 수 있는 같은 타입의 원자(Atomic)값들의 집합</li>
</ul>

<h2 id="관계형-데이터-모델relational-data-model">관계형 데이터 모델(Relational Data Model)</h2>

<ul>
  <li>2차원적인 표(Table)를 이용해서 데이터 상호 관계를 정의하는 DB구조</li>
</ul>]]></content><author><name>Lee Kyuhwan</name></author><category term="EIP_PS" /><category term="EIP_PS" /></entry><entry><title type="html">2.데이터 입출력 구현 41~50</title><link href="http://localhost:4000/eip_ps/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9E%85%EC%B6%9C%EB%A0%A5%EA%B5%AC%ED%98%8401/" rel="alternate" type="text/html" title="2.데이터 입출력 구현 41~50" /><published>2022-04-25T00:00:00+09:00</published><updated>2022-04-25T00:00:00+09:00</updated><id>http://localhost:4000/eip_ps/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9E%85%EC%B6%9C%EB%A0%A5%EA%B5%AC%ED%98%8401</id><content type="html" xml:base="http://localhost:4000/eip_ps/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9E%85%EC%B6%9C%EB%A0%A5%EA%B5%AC%ED%98%8401/"><![CDATA[<h1 id="41-관계형-데이터베이스의-제약-조건---키key">41. 관계형 데이터베이스의 제약 조건 - 키(Key)</h1>

<blockquote>
  <p>키의 종류를 기억, 각 키에 대한 개념</p>
</blockquote>

<h2 id="키key">키(Key)</h2>

<ul>
  <li>
    <p>데이터베이스에서 조건에 만족하는 튜플을 찾거나 순서대로 정렬할 때 기준이 되는 속성</p>
  </li>
  <li>
    <p>키의 종류</p>
    <ul>
      <li>후보키(Candidate Key)</li>
      <li>기본키(Primary Key)</li>
      <li>대체키(Alternate Key)</li>
      <li>슈퍼키(Super Key)</li>
      <li>외래키(Foreign Key)</li>
    </ul>
  </li>
</ul>

<h2 id="후보키candidate-key">후보키(Candidate Key)</h2>

<ul>
  <li>속성들 중에서 튜플을 유일하게 식별하기 위해 사용되는 속성들의 부분집합</li>
  <li>유일성(Unique)과 최소성(Minimality)를 모두 만족해야 된다</li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>유일성(Unique)</td>
      <td>하나의 키 값으로 하나의 튜플만을 유일하게 식별할 수 있어야 함</td>
    </tr>
    <tr>
      <td>최소성(Minimality)</td>
      <td>키를 구성하는 속성 하나를 제거하면 유일하게 식별할 수 없도록 꼭 필요한 최소의 속성으로 구성되어야 함</td>
    </tr>
  </tbody>
</table>

<h2 id="기본키primary-key">기본키(Primary Key)</h2>

<ul>
  <li>후보키 중에서 특별이 선정된 주키(Main Key)</li>
</ul>

<h2 id="대체키alternate-key">대체키(Alternate Key)</h2>

<ul>
  <li>후보키가 둘 이상일 때 기본키를 제외한 나머지 후보키</li>
</ul>

<h2 id="슈퍼키super-key">슈퍼키(Super Key)</h2>

<ul>
  <li>릴레이션 내에 있는 속성들의 집합으로 구성된 키</li>
</ul>

<h2 id="외래키foreign-key">외래키(Foreign Key)</h2>

<ul>
  <li>다른 릴레이션의 기본키를 참조하는 속성 또는 속성들의 집합</li>
</ul>

<h1 id="42-관계형-데이터베이스의-제약-조건---무결성integrity">42. 관계형 데이터베이스의 제약 조건 - 무결성(Integrity)</h1>

<h2 id="무결성integrity">무결성(Integrity)</h2>

<ul>
  <li>데이터베이스에 저장된 데이터 값과 현실 세계의 실제값이 일치하는 정확성</li>
</ul>

<h2 id="무결성의-종류">무결성의 종류</h2>

<blockquote>
  <p>개체 무결성과 참조 무결성 개념 숙지</p>
</blockquote>

<table>
  <thead>
    <tr>
      <th>종류</th>
      <th>내용</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>개체 무결성</td>
      <td>기본 테이블의 기본키를 구성하는 어떤 속성도 Null 값이나 중복값을 가질 수 없다는 규정</td>
    </tr>
    <tr>
      <td>참조 무결성</td>
      <td>외래키 값은 Null이거나 참조 릴레이션의 기본키 값과 동일해야 함</td>
    </tr>
    <tr>
      <td>도메인 무결성</td>
      <td>주어진 속성 값이 정의된 도메인에 속한 값이어야 한다는 규정</td>
    </tr>
    <tr>
      <td>사용자 정의 무결성</td>
      <td>속성 값들이 사용자가 정의한 제약조건에 만족되어야 한다는 규정</td>
    </tr>
    <tr>
      <td>NULL 무결성</td>
      <td>릴레이션의 특정 속성 값이 NULL이 될 수 없도록 하는 규정</td>
    </tr>
    <tr>
      <td>고유 무결성</td>
      <td>릴레이션의 특정 속성에 대해 각 튜플이 갖는 속성값들이 서로 달라야 한다는 규정</td>
    </tr>
    <tr>
      <td>키 무결성</td>
      <td>하나의 릴레이션에는 적어도 하나의 키가 존재해야 한다는 규정</td>
    </tr>
    <tr>
      <td>관계 무결성</td>
      <td>릴레이션에 어느 한 튜플의 삽입 가능 여부 또는 한 릴레이션과 다른 릴레이션의 튜플들 사이의 관계에 대한 적절성 여부를 지정</td>
    </tr>
  </tbody>
</table>

<h2 id="데이터-무결성-강화">데이터 무결성 강화</h2>

<table>
  <thead>
    <tr>
      <th> </th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>애플리케이션</td>
      <td>데이터 생성, 수정, 삭제 시 무결성 조건을 검증하는 코드를 프로그램 내에 추가함</td>
    </tr>
    <tr>
      <td>데이터베이스 트리거</td>
      <td>트리거 이벤트에 무결성 조건을 실행하는 절차형 SQL을 추가함</td>
    </tr>
    <tr>
      <td>제약 조건</td>
      <td>데이터베이스에 제약 조건을 설정하여 무결성을 유지</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>애데제</p>
</blockquote>

<h1 id="43-관계대수-및-관계해석">43. 관계대수 및 관계해석</h1>

<h2 id="관계대수">관계대수</h2>

<ul>
  <li>원하는 정보와 그 정보를 검색하기 위해서 어떻게 유도하는가를 기술하는 절차적인 언어</li>
</ul>

<h2 id="순수-관계-연산자">순수 관계 연산자</h2>

<table>
  <thead>
    <tr>
      <th>종류</th>
      <th>특징</th>
      <th>기호</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Select</td>
      <td>릴레이션에 존재하는 튜플 중에서 선택 조건을 만족하는 튜플의 부분집합을 구하여 새로운 릴레이션을 만드는 연산</td>
      <td>σ(시그마)</td>
    </tr>
    <tr>
      <td>Project</td>
      <td>주어진 릴레이션에서 속성 리스트(Attribute List)에 제시된 속성 값만을 추출하여 새로운 릴레이션을 만드는 연산</td>
      <td>π(파이)</td>
    </tr>
    <tr>
      <td>Join</td>
      <td>공통 속성을 중심으로 두 개의 릴레이션을 하나로 합쳐서 새로운 릴레이션을 만드는 연산</td>
      <td>⋈</td>
    </tr>
    <tr>
      <td>Division</td>
      <td>X⊃Y인 두개의 릴레이션 R(X)와 S(Y)가 있을 때, R의 속성이 S의 속성값을 모두 가진 튜플에서 S가 가진 속성을 제외한 속성만을 구하는 연산</td>
      <td>÷</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>셀프조디</p>
</blockquote>

<h2 id="일반-집합-연산자">일반 집합 연산자</h2>

<ul>
  <li>수학적 집합 이론에서 사용하는 연산자</li>
</ul>

<table>
  <thead>
    <tr>
      <th>연산자</th>
      <th>기능 및 수학적 표현</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>합집합 UNION ∪</td>
      <td>두 릴레이션에 존재하는 튜플의 합집합을 구하되, 결과로 생성된 릴레이션에서 중복되는 튜블은 제거되는 연산</td>
    </tr>
    <tr>
      <td>교집합 INTERSECTION ∩</td>
      <td>두 릴레이션에 존재하는 튜플의 교집합을 구하는 연산</td>
    </tr>
    <tr>
      <td>차집합 DIFFERENCE －</td>
      <td>두 릴레이션에 존재하는 튜플의 차집합을 구하는 연산</td>
    </tr>
    <tr>
      <td>교차곱 CARTESIAn PRODUCT ×</td>
      <td>두 릴레이션에 있는 튜플들의 순서쌍을 구하는 연산</td>
    </tr>
  </tbody>
</table>

<h2 id="관계해석relational-calculus">관계해석(Relational Calculus)</h2>

<ul>
  <li>관계 데이터의 연산을 표현하는 방법</li>
</ul>]]></content><author><name>Lee Kyuhwan</name></author><category term="EIP_PS" /><category term="EIP_PS" /></entry><entry><title type="html">1.요구사항 확인 오답노트</title><link href="http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B8_%EC%98%A4%EB%8B%B5%EB%85%B8%ED%8A%B8/" rel="alternate" type="text/html" title="1.요구사항 확인 오답노트" /><published>2022-04-23T00:00:00+09:00</published><updated>2022-04-23T00:00:00+09:00</updated><id>http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B8_%EC%98%A4%EB%8B%B5%EB%85%B8%ED%8A%B8</id><content type="html" xml:base="http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B8_%EC%98%A4%EB%8B%B5%EB%85%B8%ED%8A%B8/"><![CDATA[<h1 id="문제">문제</h1>

<h2 id="1">1</h2>
<ul>
  <li>프로토타입 모형(Prototype Model)에 대해 간략히 서술</li>
</ul>

<h2 id="2">2</h2>
<ul>
  <li>소프트웨어 개발 방법론의 바탕이 되는 것으로, 소프트웨어를 개발하기 위한 설계, 운용, 유지보수 등의 과정을 단게별로 나눈것</li>
</ul>

<h2 id="3">3</h2>
<ul>
  <li>고객의 요구사항 변화에 유연하게 대응할 수 있도록 일정한 주기를 반복하며 개발</li>
</ul>

<h2 id="4">4</h2>
<ul>
  <li>수시로 발생하는 고객의 요구사항에 유연하게 대응하기 위해 고객의 참여와 개발 과정의 반복을 극대화하여 개발 생산성을 향상시키는 모형</li>
  <li>의사소통(Communication), 단순성(Simplicity), 용기(Courage), 존중(Respect), 피드백(Feedback)을 핵심 가치로 삼는다</li>
</ul>

<h2 id="5">5</h2>

<ul>
  <li>xp 개발 방법론의 주요 실천 방법
    <ul>
      <li>개발에 참여하는 모든 구성원(고객 포함)들은 각자 자신의 역할이 있고 그 역할에 대한 책임을 가져야 한다.</li>
    </ul>
  </li>
</ul>

<h2 id="6">6</h2>
<ul>
  <li>현행 시스템을 파악하는 과정에서 수행하는 작업들의 그룹을 순서대로 나열</li>
  <li>A : 아키텍처 구성 파악, 소프트웨어 구성 파악</li>
  <li>B : 하드웨어 구성 파악, 네트워크 구성 파악</li>
  <li>C : 시스템 구성 현황 파악, 시스템 기능 파악, 시스템 인터페이스 현황 파악</li>
</ul>

<h1 id="정답">정답</h1>

<h2 id="1-1">1</h2>
<p>견본품을 만들어 최종 결과물을 예측하는 모형</p>

<h2 id="2-1">2</h2>
<p>소프트웨어 생명 주기</p>

<h2 id="3-1">3</h2>
<p>애자일(Agile)</p>

<h2 id="4-1">4</h2>
<p>XP(eXtreme Programming)</p>

<h2 id="5-1">5</h2>
<p>Whole Team(전체 팀)</p>

<h2 id="6-1">6</h2>
<p>C -&gt; A -&gt; B</p>]]></content><author><name>Lee Kyuhwan</name></author><category term="EIP_PS" /><category term="EIP_PS" /><category term="정처기 오답노트" /></entry><entry><title type="html">1.요구사항 확인 21~30</title><link href="http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B804/" rel="alternate" type="text/html" title="1.요구사항 확인 21~30" /><published>2022-04-22T00:00:00+09:00</published><updated>2022-04-22T00:00:00+09:00</updated><id>http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B804</id><content type="html" xml:base="http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B804/"><![CDATA[<h1 id="21-sw-공학의-발전적-추세">21. S/W 공학의 발전적 추세</h1>

<h2 id="소프트웨어-재사용software-reuse">소프트웨어 재사용(Software Reuse)</h2>
<ul>
  <li>이미 개발되어 인정받은 소프트웨어를 다른 소프트웨어 개발이나 유지에 사용</li>
</ul>

<h3 id="소프트웨어-재사용-방법">소프트웨어 재사용 방법</h3>

<ul>
  <li>
    <p>합성 중심(Composition-Based) : 전자 칩과 같은 소프트웨어 부품, 즉 블록을 만들어서 끼워 맞춰 소프트웨어를 완성시키는 방법, 블록 구성 방법이라고도 함</p>
  </li>
  <li>
    <p>생성 중심(Generation-Based) : 추상화 형태로 써진 명세를 구체화하여 프로그램을 만드는 방법으로, 패턴 구성 방법이라고도 함</p>
  </li>
</ul>

<h2 id="소프트웨어-재공학software-reengineering">소프트웨어 재공학(Software Reengineering)</h2>
<ul>
  <li>기존 시스템을 이용하여 보다 나은 시스템을 구축하고, 새로운 기능을 추가하여 소프트웨어 성능을 향상 시키는 것</li>
</ul>

<h3 id="이점">이점</h3>
<ul>
  <li>소프트웨어의 품질 향상</li>
  <li>생산성 증가</li>
  <li>수명 연장</li>
  <li>오류 감소</li>
</ul>

<h2 id="casecomputer-aided-software-engineering">CASE(Computer Aided Software Engineering)</h2>

<ul>
  <li>소프트웨어 개발 과정에서 사용되는 요구분석, 설계, 구현, 검사 및 디버깅 과정 전체 또는 일부를 컴퓨터와 전용 소프트웨어 도구를 사용하여 자동화 하는 것</li>
</ul>

<h3 id="주요-기능">주요 기능</h3>
<ul>
  <li>소프트웨어 생명 주기 전 단계의 연결</li>
  <li>다양한 소프트웨어 개발 모형 지원</li>
  <li>그래픽 지원</li>
</ul>

<h1 id="22-비용-산정-기법">22. 비용 산정 기법</h1>

<h2 id="소프트웨어-비용-산정">소프트웨어 비용 산정</h2>

<ul>
  <li>소프트웨어 비용 산정은 개발에 소요되는 인원, 자원, 기간 등으로 소프트웨어의 규모를 확인하여 개발 계획 수립에 필요한 비용을 산정하는 것</li>
</ul>

<h2 id="소프트웨어-비용-결정-요소">소프트웨어 비용 결정 요소</h2>

<ul>
  <li>프로젝트 요소
    <ul>
      <li>제품 복잡도 : 소프트웨어의 종류에 따라 발생할 수 있는 문제점들의 난이도</li>
      <li>시스템 크기 : 소프트웨어의 규모에 따라 개발해야 할 시스템의 크기</li>
      <li>요구되는 신뢰도 : 일정 기간 내 주어진 조건하에서 프로그램이 필요한 기능을 수행하는 정도</li>
    </ul>
  </li>
  <li>자원 요소
    <ul>
      <li>인적 자원 : 소프트웨어 개발 관련자들이 갖춘 능력 혹은 자질</li>
      <li>하드웨어 자원 : 소프트웨어 개발 시 필요한 장비와 워드프로세서, 프린터 등의 보조 장비</li>
      <li>소프트웨어 자원 : 소프트웨어 개발 시 필요한 언어 분석기, 문서화 도구 등의 개발 지원 도구</li>
    </ul>
  </li>
  <li>생산성 요소
    <ul>
      <li>개발자 능력 : 개발자들이 각춘 전문지식, 경험, 이해도, 책임감, 창의력 등</li>
      <li>개발 기간 : 소프트웨어를 개발하는 기간</li>
    </ul>
  </li>
</ul>

<h1 id="23-비용산정-방법---하향식">23. 비용산정 방법 - 하향식</h1>

<h2 id="하향식-비용-산정-기법">하향식 비용 산정 기법</h2>

<ul>
  <li>
    <p>과거의 유사한 경험을 바탕으로 전문 지식이 많은 개발자들이 참여한 회으를 통해 비용을 산정하는 비과학적인 방법</p>
  </li>
  <li>
    <p>하향식 비용 산정 기법</p>
    <ul>
      <li>전문가 감정 기법</li>
      <li>델파이 기법</li>
    </ul>
  </li>
</ul>

<h2 id="전문가-감정-기법">전문가 감정 기법</h2>

<ul>
  <li>경험이 많은 두 명 이상의 전문가에게 비용 산정을 의로하는 기법</li>
</ul>

<h2 id="델파이-기법">델파이 기법</h2>

<ul>
  <li>전문가 감정 기법의 주관적인 편견을 보완하기 위해 많은 전문가의 의견을 종합하여 산정하는 기법</li>
</ul>

<h1 id="24--비용-산정-방식---상향식">24 . 비용 산정 방식 - 상향식</h1>

<ul>
  <li>세부적인 작업 단위별로 비용을 산정한 후 집계하여 전체 비용을 산정하는 방법</li>
  <li>주요 상향식 비용 산정 기법
    <ul>
      <li>LOC(원시 코드 라인 수) 기법</li>
      <li>개발 단계별 인월수 기법</li>
      <li>수학적 산정 기법</li>
    </ul>
  </li>
</ul>

<h2 id="loc원시-코드-라인수-source-line-of-code-기법">LOC(원시 코드 라인수, source LIne Of Code) 기법</h2>

<ul>
  <li>
    <p>각 기능의 원시 코드 라인 수의 비관치, 낙관치, 기대치를 측정하여 예측지를 구하고 이를 이용하여 비용을 산정하는 기법</p>
  </li>
  <li>예측치
    <ul>
      <li>(a+4m+b)/6</li>
      <li>a 낙관치, b : 비관치, m : 기대치(중간치)
        <h3 id="산정-공식">산정 공식</h3>
      </li>
    </ul>
  </li>
  <li>노력(인월) = 개발기간 X 투입인원 = LOC / 1인당 월평균 생산 코드 라인 수</li>
  <li>개발 비용 = 노력(인월) X 단위 비용(1인당 월평균 인건비)</li>
  <li>개발 기간 = 노력(인월) / 투입 인원</li>
  <li>생산성 = LOC / 노력(인월)</li>
</ul>

<h2 id="개발-단계별-인월수effort-per-task기법">개발 단계별 인월수(Effort Per Task)기법</h2>
<ul>
  <li>LOC 기법을 보완하기 위한 기법으로, 각 기능을 구현 시키는 데 필요한 노력을 생명 주기의 각 단계별로 산정</li>
</ul>

<h1 id="25-수학적-산정-기법">25. 수학적 산정 기법</h1>

<ul>
  <li>
    <p>상향식 비용 산정 기법으로, 경험적 추정 모형, 실험적 추적 모형이라고도 한다.</p>
  </li>
  <li>
    <p>주요 수학적 산정 기법</p>
    <ul>
      <li>COCOMO 모형</li>
      <li>Putnam 모형</li>
      <li>기능 점수(FP)모형</li>
    </ul>
  </li>
</ul>

<h2 id="cocomoconstructive-cost-model-모형">COCOMO(COnstructive COst MOdel) 모형</h2>

<ul>
  <li>LOC(원시 코드 라인 수)에 의한 비용 산정 기법</li>
  <li>보헴(Boehm)이 제안</li>
</ul>

<h2 id="cocomo의-소프트웨어-개발-유형">COCOMO의 소프트웨어 개발 유형</h2>

<table>
    <tr>
        <th>
            유형
        </th>
        <th>
            특징
        </th>
    </tr>
    <tr>
        <td>
            조직형(Organic Model)
        </td>
        <td>
            기관 내부에서 개발된 중, 소규모의 소프트웨어<br />5만(50KDSI) 라인 이하의 소프트웨어를 개발하는 유형
        </td>
    </tr>
    <tr>
        <td>
            반분리형(Semi-Detached Model)
        </td>
        <td>
            조직형과 내장형의 중간형 소프트웨어<br />30만(300KDSI) 라인 이하의 소프트웨어를 개발하는 유형
        </td>
    </tr>
    <tr>
        <td>
            내장형(Embedded Model)
        </td>
        <td>
            초대형 규모의 소프트웨어<br />30만(300KDSI) 라인 이상의 소프트웨어를 개발하는 유형
        </td>
    </tr>
</table>

<h2 id="cocomo-모형의-종류">COCOMO 모형의 종류</h2>

<table>
    <tr>
        <th>
        종류
        </th>
        <th>
        특징
        </th>
    </tr>
    <tr>
        <td>
        기본형(Basic) COCOMO
        </td>
        <td>
        소프트웨어의 크기와 개발 유형만을 이용하여 비용 산정
        </td>
    </tr>
    <tr>
        <td>
        중간형(Intermediate) COCOMO
        </td>
        <td>
        기본형 COCOMO의 공식을 토대로 사용하나, 다음 4가지 특성에 의해 비용을 산정<br />제품의 특성<br />컴퓨터의 특성<br />개발 요원의 특성<br />프로젝트 특성
        </td>
    </tr>
    <tr>
        <td>
        발전형(Detailed) COCOMO
        </td>
        <td>
        중간형 COCOMO를 보완하여 만들어진 모형<br />개발 공정별로 보다 자세하고 정확하게 노력을 산출하여 비용 산정
        </td>
    </tr>
</table>

<h2 id="putnam-모형">Putnam 모형</h2>

<ul>
  <li>소프트웨어 생명 주기의 전 과정 동안에 사용될 노력의 분포를 예상하는 모형</li>
  <li>푸트남(Putnam)이 제안, 생명 주기 예측 모형이라고도 함</li>
  <li>시간에 따른 함수로 표현되는 Rayleigh-Norden 곡선의 노력 분포도를 기초로 함</li>
</ul>

<h2 id="기능-점수fp-function-point-모형">기능 점수(FP; Function Point) 모형</h2>

<ul>
  <li>알브레히트(Albrecht)가 제안</li>
  <li>소프트웨어의 기능을 증대시키는 요인별로 기능점수(FP)를 구한 후 이를 이용해서 비용을 산정</li>
  <li>소프트웨어 기능 증대 요인
    <ul>
      <li>자료 입력(입력 양식)</li>
      <li>정보 출력(출력 보고서)</li>
      <li>명령어(사용자 질의수)</li>
      <li>데이터 파일</li>
      <li>필요한 외부 루틴과의 인터페이스</li>
    </ul>
  </li>
</ul>

<h2 id="비용산정-자동화-추정-도구">비용산정 자동화 추정 도구</h2>

<table>
    <tr>
        <td>
        SLIM
        </td>
        <td>
        Rayleigh-Norden 곡선과 Putnam 예측 모델을 기초로 하여 개발된 자동화 추정 도구
        </td>
    </tr>
    <tr>
        <td>
        ESTIMACS
        </td>
        <td>
        다양한 프로젝트와 개인별 요소를 수용하도록 FP 모형을 기초로 하여 개발된 자동화 추정 도구
        </td>
    </tr>
    
</table>

<h1 id="26--프로젝트-일정">26 . 프로젝트 일정</h1>

<h2 id="pertprogram-evaluation-and-review-technique-프로그램-평가-및-검토-기술">PERT(Program Evaluation and Review Technique, 프로그램 평가 및 검토 기술)</h2>

<ul>
  <li>프로젝트에 필요한 전체 작업의 상호 관계를 표시하는 네트워크</li>
  <li>각 작업별로 다음과 같이 단계를 나누어 종료시기를 결정
    <ul>
      <li>낙관적인 경우</li>
      <li>가능성이 있는 경우</li>
      <li>비관적인 경우</li>
    </ul>
  </li>
</ul>

<h2 id="cpmcritical-path-method-임계-경로-기법">CPM(Critical Path Method, 임계 경로 기법)</h2>

<ul>
  <li>작업을 나열하고 작업에 필요한 소요 기간을 예측하는데 사용하는 기법
    <blockquote>
      <p>그림에서 굵은 선이 임계 경로, 즉 최장 경로</p>
    </blockquote>
  </li>
</ul>

<h2 id="간트-차트">간트 차트</h2>

<ul>
  <li>프로젝트 작업 일정을 막대 도표를 이용하여 표시하는 프로젝트 일정표이다.</li>
  <li>시간선(Time-Line) 차트 라고도 한다.</li>
</ul>

<h1 id="27-소프트웨어-개발-방법론-결정">27. 소프트웨어 개발 방법론 결정</h1>

<ul>
  <li>프로젝트 관리와 재사용 현황을 소프트웨어 개발 방법론에 반영하고, 확정된 소프트웨어 생명 주기와 개발 방법론에 맞춰 소프트웨어 개발 단계, 활동, 작업, 절차 등을 정의하는 것</li>
</ul>

<h2 id="프로젝트-관리project-mangement">프로젝트 관리(Project Mangement)</h2>
<ul>
  <li>최소 비용으로 시스템을 개발하기 위한 전반적인 활동</li>
</ul>

<table>
    <tr>
        <th>
        관리 유형
        </th>
        <th>
        주요 내용
        </th>
    </tr>
    <tr>
        <td>
        일정 관리
        </td>
        <td>
        작업 순서, 작업 기간 산정, 일정 개발, 일정 통제
        </td>
    </tr>
    <tr>
        <td>
        비용 관리
        </td>
        <td>
        비용 산정, 지용 예산 편성, 비용 통제
        </td>
    </tr>
    <tr>
        <td>
        인력 관리
        </td>
        <td>
        프로젝트 팀 편성, 자원 산정, 프로젝트 조직 정의, 프로젝트 팀 개발, 자원 통제, 프로젝트 팀 관리
        </td>
    </tr>
    <tr>
        <td>
        위험 관리
        </td>
        <td>
        위험 식별, 위험 평가, 위험 대처, 위험 통제
        </td>
    </tr>
    <tr>
        <td>
        품질 관리
        </td>
        <td>
        품질 계획, 품질 보증 수행, 품질 통제 수행
        </td>
    </tr>
</table>

<h1 id="28-소프트웨어-개발-표준">28 소프트웨어 개발 표준</h1>

<ul>
  <li>소프트웨어 개발 단계에서 수행하는 품질 관리에 사용되는 국제 표준</li>
  <li>주요 소프트웨어 개발 표준
    <ul>
      <li>ISO/IEC 12207</li>
      <li>CMMI(능력 성숙도 통합 모델)</li>
      <li>SPICE(소프트웨어 처리 개선 및 능력 평가 기준)</li>
    </ul>
  </li>
</ul>

<h2 id="isoiec-12207">ISO/IEC 12207</h2>
<ul>
  <li>ISO(국제표준화기구)에서 만든 표준 소프트웨어 생명 주기 프로세스</li>
  <li>ISO/IEC 12207 구분</li>
</ul>

<table>
    <tr>
        <td>
        기본 생명 주기 프로세스
        </td>
        <td>
        획득, 공급, 개발, 운영, 유지보수 프로세스
        </td>
    </tr>
    <tr>
        <td>
        지원 생명 주기 프로세스
        </td>
        <td>
        품질 보증, 검증, 확인, 활동 검토, 감사, 문서화, 형상 관리, 문제 해결 프로세스
        </td>
    </tr>
    <tr>
        <td>
        조직 생명 주기 프로세스
        </td>
        <td>
        관리, 기반 구조, 훈련 프로세스
        </td>
    </tr>
</table>

<h2 id="cmmicapability-maturity-model-integration">CMMI(Capability Maturity Model Integration)</h2>
<ul>
  <li>소프트웨어 개발 조직의 업무 능력 및 조직의 성숙도를 평가하는 모델</li>
  <li>
    <p>미국 카네기멜론 대학교의 소프트웨어 공학연구소(SEI)에서 개발</p>
  </li>
  <li>소프트웨어 성숙도</li>
</ul>

<table>
    <tr>
        <th>
         단계
        </th>
        <th>
        프로세스
        </th>
        <th>
        특징
        </th>
    </tr>
    <tr>
        <td>
         초기(Initial)
        </td>
        <td>
        정의된 프로세스 없음
        </td>
        <td>
        작업자 능력에 따라 성공 여부 결정
        </td>
    </tr>
    <tr>
        <td>
        관리(Managed)
        </td>
        <td>
        규칙화된 프로세스
        </td>
        <td>
        특정한 프로젝트 내의 프로세스 정의 및 수행
        </td>
    </tr>
    <tr>
        <td>
        정의(Defined)
        </td>
        <td>
        표준화된 프로세스
        </td>
        <td>
        조직의 표준 프로세스를 활용하여 업무 수행
        </td>
    </tr>
    <tr>
        <td>
        정량적 관리(Quantitatively Managed)
        </td>
        <td>
        예측 가능한 프로세스
        </td>
        <td>
        프로젝트를 정량적으로 관리 및 통제
        </td>
    </tr>
    <tr>
        <td>
        최적화(Optimizing)
        </td>
        <td>
        지속적 개선 프로세스
        </td>
        <td>
        프로세스 역량 향상을 위해 지속적인 프로세스 개선
        </td>
    </tr>
</table>

<h2 id="spicesoftware-process-improvement-and-capability-determination">SPICE(Software Process Improvement and Capability dEtermination)</h2>
<ul>
  <li>소프트웨어의 품질 및 생산성 향상을 위해 소프트웨어 프로세스를 평가 및 개선하는 국제 표준이다</li>
  <li>공식 명칭은 ISO/IEC 15504</li>
</ul>

<h2 id="spice의-프로세스-수행-능력-단계">SPICE의 프로세스 수행 능력 단계</h2>

<table>
    <tr>
        <th>
        단계
        </th>
        <th>
        특징
        </th>
    </tr>
    <tr>
        <td>
        불완전(Incomplete)
        </td>
        <td>
        프로세스가 구현되지 않았거나 목적을 달성하지 못한 단계
        </td>
    </tr>
    <tr>
        <td>
        수행(Performed)
        </td>
        <td>
        프로세스가 수행되고 목적이 달성된 단계
        </td>
    </tr>
    <tr>
        <td>
        관리(Manage)
        </td>
        <td>
        정의된 자원의 한도 내에서 그 프로세스가 작업 산출물을 인도하는 단계
        </td>
    </tr>
    <tr>
        <td>
        확립(Established)
        </td>
        <td>
        소프트웨어 공학 원칙에 기반하여 정의된 프로세스가 수행되는 단계
        </td>
    </tr>
    <tr>
        <td>
        예측(Predictable)
        </td>
        <td>
        프로세스가 목적 달성을 위해 통제되고, 양적인 측정을 통해서 일관되게 수행되는 단계
        </td>
    </tr>
    <tr>
        <td>
        최적화(Optimizing)
        </td>
        <td>
        프로세스 수행을 최적화하고, 지속적인 개선을 통해 업무 목적을 만족시키는 단계
        </td>
    </tr>
</table>

<h1 id="29-소프트웨어-개발-방법론-테일러링">29. 소프트웨어 개발 방법론 테일러링</h1>

<ul>
  <li>소프트웨어 개발 방법론의 절차, 사용기법 등을 수정 및 보완하는 작업</li>
  <li>소프트웨어 개발 방법론 테일러링 수행 절차
    <ul>
      <li>프로젝트 특징 정의 -&gt; 표준 프로세스 선정 및 검증 -&gt; 상위 수준의 커스터마이징 -&gt; 세부 커스터마이징 -&gt; 테일러링 문서화</li>
    </ul>
  </li>
</ul>

<h2 id="스프트웨어-개발-방법론-테일러링-고려사항">스프트웨어 개발 방법론 테일러링 고려사항</h2>

<table>
    <tr>
        <th>
        기준
        </th>
        <th>
        내용
        </th>
    </tr>
    <tr>
        <td>
        내부적 기준
        </td>
        <td>
        목표환경 : 시스템의 개발 환경과 유형이 서로 다른 경우 테일러링이 필요<br />
        요구사항 : 프로젝트의 생명 주기 활동에서 개발, 운영, 유지보수 등 프로젝트에서 우선적으로 고려할 요구사항이 서로 다른 경우 테일러링이 필요<br />
        프로젝트 규모 : 비용, 인력 기간 등 프로젝트의 규모가 서로 다른 경우 필요<br />
        보유 기술 : 프로세스, 개발 방법론, 산출물, 구성원의 능력 등이 서로 다른 경우 테일러링이 필요
        </td>
    </tr>
    <tr>
        <td>
        외부적 기준
        </td>
        <td>
        법적 제약사항 : 프로젝트별로 적용될 IT Compliance가 서로 다른 경우 필요<br />
        표준 품질 기준 : 금융, 제도 등 분야별 표준 품질 기준이 서로 다른 경우 필요
        </td>
    </tr>
</table>

<h1 id="30-소프트웨어-개발-프레임-워크">30. 소프트웨어 개발 프레임 워크</h1>

<ul>
  <li>
    <p>소프트웨어 개발에 공통적으로 사용되는 구성요소와 아키텍처를 일반화하여 손쉽게 구현할 수 있도록 여러가지 기능들을 제공해주는 반제품 형태의 소프트웨어 시스템</p>
  </li>
  <li>소프트웨어 개발 프레임워크의 주요 기능
    <ul>
      <li>예외처리</li>
      <li>트랜잭션 처리</li>
      <li>메모리 공유</li>
      <li>데이터 소스 관리</li>
      <li>서비스 관리</li>
      <li>쿼리 서비스</li>
      <li>로깅 서비스</li>
      <li>사용자 인증 서비스</li>
    </ul>
  </li>
  <li>소프트웨어 개발 프레임워크의 종류
    <ul>
      <li>스프링 프레임워크</li>
      <li>전자정부 프레임 워크</li>
      <li>닷넷 프레임워크</li>
    </ul>
  </li>
</ul>

<h2 id="스프링-프레임워크spring-framework">스프링 프레임워크(Spring Framework)</h2>

<ul>
  <li>자바 플랫폼을 위한 오픈 소스 경량형 애플리케이션 프레임 워크</li>
</ul>

<h2 id="전자정부-프레임워크">전자정부 프레임워크</h2>

<ul>
  <li>대한민국의 공공부문 정보화 사업 시 효율적인 정보 시스템의 구축을 지원하기 위해 필요한 기능 및 아키텍처를 제공하는 프레임 워크</li>
</ul>

<h2 id="닷넷-프렘워크net-framework">닷넷 프렘워크(.NET Framework)</h2>
<ul>
  <li>Windows 프로그램의 개발 및 실행 환결응 제공하는 프레임워크</li>
  <li>Microsoft 사에서 통합 인터넷 전략을 위해 개발</li>
</ul>

<h2 id="소프트웨어-개발-프레임워크의-특성">소프트웨어 개발 프레임워크의 특성</h2>

<table>
    <tr>
        <th>
        특성
        </th>
        <th>
        내용
        </th>
    </tr>
    <tr>
        <td>
        모듈화(Modularity)
        </td>
        <td>
        프레임워크는 캡슐화를 통해 모듈화를 강화하고 설계 및 구현의 변경에 따른 영향을 최소화함으로써 소프트웨어의 품질을 향상시킴<br />
        프레임워크는 개발 표준에 의한 모듈화로 인해 유지 보수가 용이
        </td>
    </tr>
    <tr>
        <td>
        재사용성(Reusability)
        </td>
        <td>
        프레임워크는 재사용 가능한 모듈들을 제공함으로써 예산 절감, 생산성 향상, 품질 보증이 가능함
        </td>
    </tr>
    <tr>
        <td>
        확장성(Extensibility)
        </td>
        <td>
        프레임워크는 다형성(Polymorphism)을 통한 인터페이스 확장이 가능하여 다양한 형태와 기능을 가진 애플리케이션 개발이 가능함
        </td>
    </tr>
    <tr>
        <td>
        제어의 역흐름(Inversion of Control)
        </td>
        <td>
        개발자가 관리하고 통제해야 하는 객체들의 제어를 프레임워크에 넘김으로써 생산성을 향상시킴
        </td>
    </tr>
</table>]]></content><author><name>Lee Kyuhwan</name></author><category term="EIP_PS" /><category term="EIP_PS" /></entry><entry><title type="html">1.요구사항 확인 16~20</title><link href="http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B803/" rel="alternate" type="text/html" title="1.요구사항 확인 16~20" /><published>2022-04-19T00:00:00+09:00</published><updated>2022-04-21T00:00:00+09:00</updated><id>http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B803</id><content type="html" xml:base="http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B803/"><![CDATA[<h1 id="16-시퀀스sequence-다이어그램">16. 시퀀스(Sequence) 다이어그램</h1>

<h2 id="구성-요소">구성 요소</h2>

<ul>
  <li>액터(Actor) : 시스템으로부터 서비스를 요청하는 외부 요소로, 사람이나 외부 시스템을 의미</li>
  <li>객체(Object)  : 메시지를 주고받는 주체</li>
  <li>생명선(Lifeline) : 객체가 메모리에 존재하는 기간으로, 객체 아래쪽에 점선을 그어 표현// 객체 소멸이 표시된 기간까지 존재</li>
  <li>실행 상자(Active Box, 활성 상자) : 객체가 메시지를 주고 받으며 구동되고 있음을 표현</li>
  <li>메시지(Message) : 객체가 상호 작용을 위해 주고받는 메시지</li>
  <li>객체 소멸 : 해당 객체가 더이상 메모리에 존재하지 않음을 표현</li>
  <li>프레임(Frame) : 다이어그램의 전체 또는 일부를 묶어 표현</li>
</ul>

<h2 id="특징">특징</h2>

<ul>
  <li>시스텡이나 객체들이 메시지를 주고받으며 상호 작용하는 과정을 그림으로 표현</li>
</ul>

<h1 id="17-커뮤니케이션communication-다이어그램">17. 커뮤니케이션(Communication) 다이어그램</h1>

<h2 id="특징-1">특징</h2>

<ul>
  <li>시스템이나 객체들이 메시지를 주고 받으며 시간의 흐름에 따라 상호 작용하는 과정을 액터, 객체, 링크, 메시지 등의 요소를 사용하여 그림으로 표현</li>
  <li>동작에 참여하는 객체들 사이의 간계를 파악하는데 사용</li>
</ul>

<h2 id="구성-요소-1">구성 요소</h2>
<ul>
  <li>액터(ACtor) : 시스템으로부터 서비스를 요청하는 외부 요소로, 사람이나 외부 시스템을 의미</li>
  <li>객체(Object) : 메시지를 주고받는 주체</li>
  <li>링크(Link) : 객체들 간의 관계를 표현한 것 // 액터와 객체, 객체와 객체 간에 실선을 그어 표현</li>
  <li>메시지(Message) : 객체가 상호 작용을 위해 주고받는 내용 //  화살표의 방향은 메시지를 받는 쪽으로 향하게 표현 // 일정한 순서에 의해 처리되는 메시지의 경우 숫자로 순서를 표시</li>
</ul>

<h1 id="18-상태state-다이어그램">18. 상태(State) 다이어그램</h1>

<h2 id="특징-2">특징</h2>
<ul>
  <li>객체들 사이에 발생하는 이벤트에 의한 객체들의 상태 변화를 그림으로 표현</li>
  <li>객체의 상태란 객체가 갖는 속성 값의 변화를 의미</li>
  <li>특정 객체가 어떤 이벤트에 의해 상태 변환 과정이 진행되는지 확인</li>
</ul>

<h1 id="19-패키지package-다이어그램">19. 패키지(Package) 다이어그램</h1>

<h2 id="특징-3">특징</h2>
<ul>
  <li>요소들을 그룹화한 패키지간의 의존 관계를 표현</li>
  <li>패키지는 또 다른 패키지의 요소가 될 수 있다.</li>
  <li>대규모 시스템에서 주요 요소 간의 종속성을 파악하는데 사용</li>
</ul>

<h1 id="20-소프트웨어-개발-방법론">20 소프트웨어 개발 방법론</h1>

<h2 id="컴포넌트-기반cbd-component-based-design-방법론">컴포넌트 기반(CBD; Component Based Design) 방법론</h2>

<ul>
  <li>
    <p>기존의 시스템이나 소프트웨어를 구성하는 컴포넌트를 조합하여 하나의 새로운 애플리케이션을 만드는 방법론</p>
  </li>
  <li>
    <p>특징</p>
    <ul>
      <li>개발 기간 단축으로 인한 생산성 향상</li>
      <li>새로운 기능 추가가 쉬운 확장성</li>
      <li>소프트웨어 재사용이 가능</li>
    </ul>
  </li>
</ul>

<h2 id="구조적-방법론">구조적 방법론</h2>

<ul>
  <li>
    <p>사용자 요구사항을 파악하요 문서화하는 처리(Process) 중심의 방법론</p>
  </li>
  <li>
    <p>구조적 방법론의 개발 절차</p>
    <ul>
      <li>타당성 검토 단계 -&gt; 계획 단계 -&gt; 요구사항 단계 -&gt; 설계 단계 -&gt; 구현 단계 -&gt; 시험 단계 -&gt; 운용/유지보수 단계</li>
    </ul>
  </li>
</ul>

<h2 id="정보공학-방법론">정보공학 방법론</h2>

<ul>
  <li>
    <p>계획, 분석, 설계, 구축에 정형화된 기법들을 상호 연관성 있게 통합 및 적용하는 자료(Data) 중심의 방법론</p>
  </li>
  <li>
    <p>개발절차</p>
    <ul>
      <li>정보 전략 계획 수립 단계 -&gt; 업무 영역 분석 단계 -&gt; 업무 시스템 설계 단계 -&gt; 업무 시스템 구축 단계</li>
    </ul>
  </li>
</ul>

<h2 id="객체-지향-방법론">객체 지향 방법론</h2>

<ul>
  <li>
    <p>객체들을 조립해서 필요한 소프트웨어를 구현하는 방법론</p>
  </li>
  <li>
    <p>개발 절차</p>
    <ul>
      <li>요구 분석 단계 -&gt; 설계 단계 -&gt; 구현 단계 -&gt; 테스트 및 검증 단계 -&gt; 인도 단계</li>
    </ul>
  </li>
</ul>]]></content><author><name>Lee Kyuhwan</name></author><category term="EIP_PS" /><category term="EIP_PS" /></entry><entry><title type="html">1.요구사항 확인 11~15</title><link href="http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B802/" rel="alternate" type="text/html" title="1.요구사항 확인 11~15" /><published>2022-04-17T00:00:00+09:00</published><updated>2022-04-17T00:00:00+09:00</updated><id>http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B802</id><content type="html" xml:base="http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B802/"><![CDATA[<h1 id="11-uml---관계relationship">11. UML - 관계(Relationship)</h1>

<h2 id="관계relationships">관계(Relationships)</h2>

<ul>
  <li>
    <p>사물과 사물 사이의 연관성을 표현하는 것</p>
  </li>
  <li>
    <p>관계의 종류</p>
    <ul>
      <li>연관 관계</li>
      <li>집합 관계</li>
      <li>포함 관계</li>
      <li>일반화 관계</li>
      <li>의존 관계</li>
      <li>실체화 관계</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>개별적인 개념과 표현 방법을 확실히 숙지</p>
</blockquote>

<h2 id="연관association-관계">연관(Association) 관계</h2>

<ul>
  <li>
    <p>2개 이상의 사물이 서로 관련되어 있는 관계</p>
  </li>
  <li>
    <p>실선으로 연결하여 표현</p>
  </li>
  <li>
    <p>방향성은 화살표로 표현</p>
  </li>
  <li>
    <p>양방향 관게는 실선으로만 연결</p>
  </li>
  <li>
    <p>다중도를 *로 실선위에 표기</p>
  </li>
</ul>

<table>
    <tr>
      <td>다중도</td>
      <td>의미</td>
    </tr>
    <tr>
      <td>1</td>
      <td>1개의 객체과 연관되어 있음</td>
    </tr>
    <tr>
      <td>n</td>
      <td>n개의 객체가 연관되어 있음</td>
    </tr>
    <tr>
      <td>0..1</td>
      <td>연관된 객체가 없거나 1개만 존재함</td>
    </tr>
    <tr>
      <td>0..* 또는 *</td>
      <td>연관된 객체가 없거나 다수일 수 있음</td>
    </tr>
    <tr>
      <td>1..*</td>
      <td>연관된 객체가 적어도 1개 이상임</td>
    </tr>
    <tr>
      <td>n..*</td>
      <td>연관된 객체가 적어도 n개 이상임</td>
    </tr>
    <tr>
      <td>n..m</td>
      <td>연관된 객체가 최소 n개에서 최대 m개임</td>
    </tr>
  </table>

<blockquote>
  <p>집은 한사람에 의해서만 소유가 가능하고 사람은 집을 하나만 소유가 가능 <image src="https://user-images.githubusercontent.com/93482597/163821865-5ccbb9d0-d5b7-4dd1-aa8f-58c8a0eab9c5.png"></image> 학생은 한 명 이상의 선생님으로부터 가르침을 받고 선생님은 한 명 이상의 학생을 가르친다 <image src="https://user-images.githubusercontent.com/93482597/163822091-6e659e9c-0d4c-424b-a6e2-3557d8fc4834.png"></image></p>
</blockquote>

<h2 id="집합aggregation-관계">집합(Aggregation) 관계</h2>

<ul>
  <li>하나의 사물이 다른 사물에 포함되어 있는 관계</li>
  <li>포함하는 쪽과 포함되는 쪽은 서로 독립적</li>
  <li>포함되는 쪽에서 포함하는 쪽으로 속이 빈 마름모를 연결</li>
</ul>

<blockquote>
  <p>프린터는 컴퓨터에 연결해서 사용할 수 있으며, 다른 컴퓨터에도 연결해서 사용 가능<image src="https://user-images.githubusercontent.com/93482597/163823157-1b6414c9-71aa-4db3-bc62-e88f0bd758b7.png"></image></p>
</blockquote>

<h2 id="포함composition-관계">포함(Composition) 관계</h2>

<ul>
  <li>포함하는 사물의 변화가 포함되는 사물에게 영향을 미치는 관계</li>
  <li>포함하는 쪽과 포함되는 쪽은 서로 독립될 수 없고 생명주기를 함께함</li>
  <li>포함되는 쪽에서 포함하는 쪽으로 속이 채워진 마름모를 연결하여 표현</li>
</ul>

<blockquote>
  <p>문을 열 수 있는 키는 하나이며, 해당 키로 다른 문은 열 수 없다. 문이 없어지면 키도 더 이상 필요하지 않다. <image src="https://user-images.githubusercontent.com/93482597/163823548-c2165327-2534-4716-8aba-6dd9db017a73.png"></image></p>
</blockquote>

<h2 id="일반화generalization-관계">일반화(Generalization) 관계</h2>
<ul>
  <li>하나의 사물이 다른 사물에 비해 더 일반적이거나 구체적인 관계</li>
  <li>일반적인 개념을 상위(부모), 구체적인 개념을 하위(자식)라고 부름</li>
  <li>구체적인 사물에서 일반적인 사물 쪽으로 속이 빈 화살표를 연결하여 표현</li>
</ul>

<blockquote>
  <p>아메리카노와 에스프레소는 커피, 커피에는 아메리카노와 에스프레소가 있다. <image src="https://user-images.githubusercontent.com/93482597/163824743-3f52dee1-8c9e-4616-b457-ed73ad9aa4ac.png"></image></p>
</blockquote>

<h2 id="의존dependency-관계">의존(Dependency) 관계</h2>

<ul>
  <li>서로에게 영향을 주는 짧은 시간 동안만 연관을 유지하는 관계</li>
  <li>사물의 변화가 다른 사물에도 영향을 미치는 관계</li>
  <li>영향을 주는사물(이용자)이 영향을 받는 사물(제공자) 쪽은로 점선 화살표를 연결하여 표현</li>
</ul>

<blockquote>
  <p>등급이 높으면 할인율을 적용하고 등급이 낮으면 할인율을 적용하지 않는다. <image src="https://user-images.githubusercontent.com/93482597/163825472-d234b8f1-73bc-4575-a7ca-620304d4038e.png"></image></p>
</blockquote>

<h2 id="실체화realization-관계">실체화(Realization) 관계</h2>

<ul>
  <li>사물이 할 수 있거나 해야 하는 기능으로, 서로를 그릅화 할 수 있는 관계</li>
  <li>사물에서 기능 쪽으로 속이 빈 점선 화살표를 연결</li>
</ul>

<blockquote>
  <p>비행기는 날 수 있고 새도 날 수 있다. 그러므로 비행기와 새는 날 수 있다는 행위로 그룹화 할 수 있다. <image src="https://user-images.githubusercontent.com/93482597/163825914-bed6d330-0d3d-4bfb-aaa6-4e564dae02b1.png"></image></p>
</blockquote>

<h1 id="12-uml---다이어-그램">12. UML - 다이어 그램</h1>

<h2 id="다이어그램diagram">다이어그램(Diagram)</h2>
<ul>
  <li>사물과 관계를 도형으로 표현한 것</li>
  <li>정적 모델링에서는 주로 구조적 다이어그램</li>
  <li>동적 모델링에서는 주로 행위 다이어그램</li>
</ul>

<blockquote>
  <p>다이어그램이 무엇인지, 구조적, 행위 다이어그램에 어떤것들이 있는지 암기</p>
</blockquote>

<h2 id="구조적structural-다이어그램-종류">구조적(Structural) 다이어그램 종류</h2>

<table>
  <tr>
    <th>
    종류
    </th>
    <th>
    내용
    </th>
  </tr>
  <tr>
    <td>
    클래스 다이어그램<br />(Class Diagram)
    </td>
    <td>
    클래스와 클래스가 가지는 속성, 클래스 사이의 관계를 표현함
    </td>
  </tr>
  <tr>
    <td>
    객체 다이어그램<br /> (Object Diagram)
    </td>
    <td>
    클래스에 속한 사물(객체)들, 즉 인스턴스(Instance)를 특정 시점의 객체와 객체 사이의 관계로 표현함<br />럼바우(Rumbaugh) 객체지향 분석 기법에서 객체 모델링에 활용됨
    </td>
  </tr>
  <tr>
    <td>
    컴포넌트 다이어그램<br />(Component Diagram)
    </td>
    <td>
    실제 구현 모듈인 컴포넌트 간의 관계나 컴포넌트 간의 인터페이스를 표현함<br />구현 단계에서 사용됨
    </td>
  </tr>
  <tr>
    <td>
    배치 다이어그램<br />(Deployment Diagram)
    </td>
    <td>
    결과물, 프로세스, 컴포넌트 등 물리적 요소들의 위치를 표현함<br />구현 단계에서 사용됨
    </td>
  </tr>
  <tr>
    <td>
    복합체 구조 다이어그램<br />(Composite Structure Diagram)
    </td>
    <td>
    클래스나 컴포넌트가 복합 구조를 갖는 경우 그 내부 구조를 표현함
    </td>
  </tr>
  <tr>
    <td>
    패키지 다이어그램<br />(Package Diagram)
    </td>
    <td>
    유스케이스나 클래스 등의 모델 요소들을 그룹화한 패키지들의 관계를 표현함
    </td>
  </tr>

</table>

<blockquote>
  <p>클객컴배복패</p>
</blockquote>

<h2 id="행위behavioral-다이어그램의-종류">행위(Behavioral) 다이어그램의 종류</h2>

<table>
  <tr>
    <th>종류</th>
    <th>내용</th>
  </tr>
  <tr>
    <td>유스케이스 다이어그램<br />(Use Case Diagram)</td>
    <td>사용자의 요구를 분석하는 것으로, 기능 모델링 작업에 사용<br />사용자(Actor)와 사용사례(Use Case)로 구성됨</td>
  </tr>
  <tr>
    <td>시퀀스 다이어그램<br /></td>
    <td>상호 작용하는 시스템이나 객체들이 주고 받는 메시지를 표현</td>
  </tr>
  <tr>
    <td>커뮤니케이션 다이어그램<br />(Communication Diagram)</td>
    <td>동작에 참여하는 객체들이 주고받는 메시지와 객체들 간의 연관 관계를 표현</td>
  </tr>
  <tr>
    <td>상태 다이어그램<br />(State Diagram)</td>
    <td>하나의 객체가 자신이 속한 클래스의 상태 변화 혹은 다른 객체와의 상호 작용에 따라 상태가 어떻게 변화하는지를 표현<br />럼바우(Rumbaugh) 객체지향 분석 기법에서 동적 모델링에 활용</td>
  </tr>
  <tr>
    <td>활동 다이어그램<br />(Activity Diagram)</td>
    <td>시스템이 어떤 기능을 수행하는지 객체의 처리 로직이나 조건에 따른 처리의 흐름을 순서에 따라 표현함</td>
  </tr>
  <tr>
    <td>상호작용 개요 다이어그램<br />(Interaction Overview Diagram)</td>
    <td>상호작용 다이어그램 간에 제어 흐름을 표현</td>
  </tr>
  <tr>
    <td>타이밍 다이어그램<br />(Timing Diagram)</td>
    <td>객체 상태 변화와 시간 제약을 명시적으로 표현함</td>
  </tr>
</table>

<blockquote>
  <p>유시커상활상타</p>
</blockquote>

<h2 id="스테레오-타입stereotype">스테레오 타입(Stereotype)</h2>

<ul>
  <li>UML에서 표현하는 기본 기능 외에 추가적인 기능을 표현하는 것</li>
  <li>길러멧(Guilemet)이라고 부르는 겹화살괄호(«») 사이에 표현할 형태를 기술</li>
</ul>

<table>
  <tr>
    <th>
    표현 형태
    </th>
     <th>
     의미
    </th>
  </tr>
    <tr>
    <td>
    &lt;&lt;'include&gt;&gt;
    </td>
     <td>
     연결된 다른 UML 요소에 대해 포함 관계에 있는 경우
    </td>
  </tr>
 <tr>
    <td>
    &lt;&lt;'extends&gt;&gt;
    </td>
     <td>
     연결된 다른 UML 요소에 대해 확장 관계에 있는 경우
    </td>
  </tr>
 <tr>
    <td>
    &lt;&lt;'interface&gt;&gt;
    </td>
     <td>
     인터페이스를 정의하는 경우
    </td>
  </tr>
 <tr>
    <td>
    &lt;&lt;'exception&gt;&gt;
    </td>
     <td>
     예외를 정의하는 경우
    </td>
  </tr>
 <tr>
    <td>
    &lt;&lt;'constructor&gt;&gt;
    </td>
     <td>
     생성자 역할을 수행하는 경우
    </td>
  </tr>

</table>

<h1 id="13-유스케이스use-case-다이어그램">13. 유스케이스(Use Case) 다이어그램</h1>

<ul>
  <li>
    <p>유스케이스(Use Case)는 사용자가 보는 관점에서 시스템이 액터에게 제공하는 서비스 또는 기능을 표현한 것</p>
  </li>
  <li>
    <p>타원으로 표현하며, 타원 안쪽이나 아래쪽에 유스케이스(Use Case) 이름을 기술한다</p>
  </li>
  <li>
    <p>유스케이스(Use Case) 이름은 액터와 시스템 사이에서 이뤄지는 상호 작용의 목적을 내포하되 단순 명료하게 기술</p>
  </li>
</ul>

<h3 id="관계relationship">관계(Relationship)</h3>

<ul>
  <li>
    <p>포함 «‘include»</p>
  </li>
  <li>
    <p>확장 «‘extends»</p>
  </li>
  <li>
    <p>일반화</p>
  </li>
</ul>

<h3 id="유스케이스-다이어그램을-표현할-때-사용되는-구성-요소-4가지">유스케이스 다이어그램을 표현할 때 사용되는 구성 요소 4가지</h3>

<ul>
  <li>
    <p>시스템(System)/ 시스템 범위(System Scope)</p>
  </li>
  <li>
    <p>액터(Actor)</p>
  </li>
  <li>
    <p>유스케이스(Use Case)</p>
  </li>
  <li>
    <p>관계(Relationship)</p>
  </li>
</ul>

<h1 id="14-활동activity-다이어그램">14. 활동(Activity) 다이어그램</h1>

<ul>
  <li>
    <p>자료 흐릅도(DFD, Data Flow Diagram)와 유사</p>
  </li>
  <li>
    <p>시스템이 어떤 기능을 수행하는지 객체의 처리 로직이나 조건에 따른 처리의 흐름을 순서에 따라 표현한 것</p>
  </li>
  <li>
    <p>유스케이스 안에서 혹은 유스케이스 사이의 복잡한 처리의 흐름을 표현</p>
  </li>
  <li>
    <p>활동(Activity) 다이어그램 구성 요소</p>
  </li>
</ul>

<table>
  <tr>
    <th>
      구성요소
    </th>
    <th>
      표현 방법
    </th>
    <th>
    내용
    </th>
  </tr>
  <tr>
    <td>
      액션(Action) / 액티비티(Activity)
    </td>
    <td>
     액션
     <image src="https://user-images.githubusercontent.com/93482597/163842008-e7bcb2e6-ed40-41a9-9729-547c839e7f4e.png" />
     액티비티
     <image src="https://user-images.githubusercontent.com/93482597/163842165-f2abf7d7-185b-4d9f-be98-3e12100087c9.png" />
    </td>
    <td>
      액션 : 더 이상 분해할 수 없는 단일 작업<br />액티비티 : 몇 개의 액션으로 분리될 수 있는 작업
    </td>
  </tr>
  <tr>
    <td>
    시작노드
    </td>
    <td>
      <image src="https://user-images.githubusercontent.com/93482597/163842710-a9fe1c28-b987-425d-9c6e-136a68add711.png" />
    </td>
    <td>
      액션이나 액티비티가 시작됨을 표현한 것
    </td>
  </tr>
  <tr>
    <td>
      종료 노드
    </td>
    <td>
      <image src="https://user-images.githubusercontent.com/93482597/163842454-5826ff6e-54f4-45a6-9d59-7288fa5aa603.png" />
    </td>
    <td>
     액티비티 안의 모든 흐름이 종료됨을 표현
    </td>
  </tr>
  <tr>
    <td>
      조건(판단) 노드
    </td>
    <td>
      <image src="https://user-images.githubusercontent.com/93482597/163842939-86d69c88-7c64-45a9-91b9-5fec8a31799f.png" />
    </td>
    <td>
      조건에 따라 제어의 흐름이 분리됨을 표현
    </td>
  </tr>
  <tr>
    <td>
    병합 노드
    </td>
    <td>
      <image src="https://user-images.githubusercontent.com/93482597/163843327-29febc2d-e0d5-4d54-9d42-b908f818746a.png" />
    </td>
    <td>
      여러 경로의 흐름이 하나로 합쳐짐을 표현
    </td>
  </tr>
  <tr>
    <td>
     포크(Fork) 노드
    </td>
    <td>
    <image src="https://user-images.githubusercontent.com/93482597/163843596-04e31644-56f3-4276-a148-a95f6ab0cc54.png" />
    </td>
    <td>
    액티비티의 흐름이 분리되어 수행됨을 표현
    </td>
  </tr>
  <tr>
    <td>
    조인(Join) 노드
    </td>
    <td>
    <image src="https://user-images.githubusercontent.com/93482597/163843736-4de59faf-0dab-4ae7-b5bc-3529399271c1.png" />
    </td>
    <td>
      분리되어 수행되던 액티비티의 흐름이 다시 합쳐짐을 표현
    </td>
  </tr>
  <tr>
    <td>
      스윔레인(Swim Lane)
    </td>
    <td>
      <image src="https://user-images.githubusercontent.com/93482597/163846448-bce172e2-f785-436e-8e30-420b954c8a8e.png" />
    </td>
    <td>
     액티비티 수행을 담당하는 주체를 구분하는 선<br />가로 또는 세로 실선을 그어 구분
    </td>
  </tr>
</table>

<h1 id="15-클래스class-다이어그램">15. 클래스(Class) 다이어그램</h1>

<h2 id="클래스-다이어그램">클래스 다이어그램</h2>

<ul>
  <li>
    <p>시스템을 구성하는 요소에 대해 이해할 수 있는 구조적 다이어그램</p>
  </li>
  <li>
    <p>시스템을 구성하는 요소를 문서화 하는데 사용</p>
  </li>
  <li>
    <p>코딩에 필요한 객체의 속성, 함수 등의 정보를 잘 표현하고 있어 시스템을 모델링하는 데자주 사용</p>
  </li>
  <li>
    <p>클래스, 제약조건, 관계 등으로 구성</p>
  </li>
  <li>
    <p>클래스 다이어그램은 UML 다이어그램 중 객체(Object)들을 클래스로 추상화하여 표현하는 다이어그램으로 대표적인 구조적 다이어그램이다.</p>
  </li>
  <li>
    <p>클래스는 각각의 객체들이 갖는 속성과 메소드를 표현한 것으로 3개의 구획으로 나눠 이름, 속성, 메소드를 표기한다.</p>
  </li>
</ul>

<h2 id="연관-클래스">연관 클래스</h2>

<ul>
  <li>
    <p>연관 관계에 있는 두 클래스에 추가적으로 표현해야 할 속성이나 오퍼레이션이 있는 경우 생성하는 클래스</p>
  </li>
  <li>
    <p>두 클래스의 연관 관계를 나타내는 선의 가운데로부터 점선을 연관클래스로 이어 표시</p>
  </li>
  <li>
    <p>연관클래스의 이름은 연관 관계의 이름을 이용해 지정</p>
  </li>
</ul>]]></content><author><name>Lee Kyuhwan</name></author><category term="EIP_PS" /><category term="EIP_PS" /></entry><entry><title type="html">1.요구사항 확인 1~5</title><link href="http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B800/" rel="alternate" type="text/html" title="1.요구사항 확인 1~5" /><published>2022-04-08T00:00:00+09:00</published><updated>2022-04-09T00:00:00+09:00</updated><id>http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B800</id><content type="html" xml:base="http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B800/"><![CDATA[<h1 id="1-소프트웨어-생명-주기">1. 소프트웨어 생명 주기</h1>

<h2 id="소프트웨어-생명-주기software-life-cycle">소프트웨어 생명 주기(Software Life Cycle)</h2>
<ul>
  <li>
    <p>소프트웨어를 개발하기 위한 과정을 각 단계별로 나눈 것</p>
  </li>
  <li>
    <p>대표 모형</p>
    <ul>
      <li>폭포수 모형</li>
      <li>프로토타입 모형</li>
      <li>나선형 모형</li>
      <li>애자일 모형</li>
    </ul>
  </li>
</ul>

<h2 id="폭포수-모형waterfall-model-원형-모형">폭포수 모형(Waterfall Model, 원형 모형)</h2>
<ul>
  <li>각 단계를 확실히 매듭짓고 다음 단계를 진행하는 개발 방법론
    <blockquote>
      <p>전통적인 소프트웨어 생명 주기 모형</p>
    </blockquote>
  </li>
</ul>

<h2 id="프로토타입-모형prototype-model-원형-모형">프로토타입 모형(Prototype Model, 원형 모형)</h2>
<ul>
  <li>견본품(Prototype)을 만들어 최종 결과물을 예측하는 모형</li>
</ul>

<h2 id="나선형-모형spiral-model-점진적-모형">나선형 모형(Spiral Model, 점진적 모형)</h2>
<ul>
  <li>여러 번의 소프트웨어 개발 과정을 거쳐 점진적으로 개발하는 모형</li>
</ul>

<p><strong>4가지 주요 활동</strong></p>

<blockquote>
  <p>계획 수립 -&gt; 위험 분석 -&gt; 개발 및 검증 -&gt; 고객 평가 <strong>(계위개고)</strong></p>
</blockquote>

<h2 id="애자일-모형agile-model">애자일 모형(Agile Model)</h2>

<ul>
  <li>
    <p>요구사항 변화에 유연하게 대응할 수 있도록 일정한 주기를 반복하면서 개발하는 모형</p>
  </li>
  <li>
    <p><strong><em>폭포수 모형과 대조적</em></strong></p>
  </li>
  <li>
    <p><strong>대표 모형</strong></p>
    <ul>
      <li>스크럼(Scrum)</li>
      <li>XP(eXtreme Programming)</li>
      <li>칸반(Kanban)</li>
      <li>Lean</li>
      <li>기능 중심 개발(FDD;Feature Driven Development)</li>
    </ul>
  </li>
</ul>

<h2 id="애자일-개발-4가지-핵심-가치">애자일 개발 4가지 핵심 가치</h2>
<ul>
  <li>프로세스와 도구보다는 개인과 상호작용에 더 가치를 둔다.</li>
  <li>방대한 문서보다는 실행되는 SW에 더 가치를 둔다.</li>
  <li>계약 협상보다는 고객과 협업에 더 가치를 둔다.</li>
  <li>계획을 따르기 보다는 변화에 반응하는 것에 더 가치를 둔다.</li>
</ul>

<h2 id="소프트웨어-공학">소프트웨어 공학</h2>
<ul>
  <li>소프트웨어의 위기를 극복하기 위한 방안으로 연구된 학문</li>
  <li>소프웨어 공학의 기본 원칙
    <ul>
      <li>현대적인 프로그래밍 기술을 계속적으로 적용해야 한다.</li>
      <li>개발된 소프트웨어의 품질이 유지되도록 지속적으로 검증해야 한다.</li>
      <li>소프트웨어 개발 관련 사항 및 결과에 대한 명확한 기록을 유지해야 한다.</li>
    </ul>
  </li>
</ul>

<h1 id="2-스크럼scrum-기법">2. 스크럼(Scrum) 기법</h1>

<h2 id="스크럼scrum">스크럼(Scrum)</h2>
<p>팀이 중심이 되어 개발의 효율성을 높이는 기법</p>

<h2 id="스크럼-팀">스크럼 팀</h2>

<table>
  <thead>
    <tr>
      <th>구성원</th>
      <th>역할</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>제품 책임자(PO;Product Owner)</td>
      <td>백로그(Backlog)를 작성<br /> 이해도가 높고, 의사를 결정할 사람</td>
    </tr>
    <tr>
      <td>스크럼 마스터(SM;Scrum Master)</td>
      <td>가이드 역할</td>
    </tr>
    <tr>
      <td>개발팀(DT;Development Team)</td>
      <td>제품 개발을 수행</td>
    </tr>
  </tbody>
</table>

<h2 id="스크럼-개발-프로세스">스크럼 개발 프로세스</h2>

<table>
  <thead>
    <tr>
      <th>프로세스</th>
      <th>내용</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>스프린트 계획 회의(Springt Planning Meeting)</td>
      <td>제품 백로그 중 이번 스프린트에서 수행할 작업을 대상으로 단기 일정을 수립하는 회의</td>
    </tr>
    <tr>
      <td>스프린트(Sprint)</td>
      <td>실제 개발 작업을 진행하는 과정, 2~4주 정도</td>
    </tr>
    <tr>
      <td>일일 스크럼 회의(Daily Scrum Meeting)</td>
      <td>모든 팀원이 약속된 시간에 약 15분 동안 진행 상황을 점검하는 회의&lt;/br&gt;남은 작업 시간은 소멸 차드(Burn-down Chart)에 표시</td>
    </tr>
    <tr>
      <td>스프린트 검토 회의(Sprint Review)</td>
      <td>요구사항에 잘 부합하는지 테스팅</td>
    </tr>
    <tr>
      <td>스프린트 회고(Sprint Retrospective)</td>
      <td>규칙 준수 여부 및 개선할 점을 확인하고 기록</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>계획 -&gt; 진행(스프린트) -&gt; 회의, 검토 -&gt; 회고 순으로 진행</p>
</blockquote>

<h1 id="3-xpextreme-programming-기법">3. XP(eXtreme Programming) 기법</h1>

<h2 id="xpextreme-programming">xp(eXtreme Programming)</h2>

<ul>
  <li>
    <p>요구사항에 유연하게 대응하기 위해 고객의 참여와 개발 과정의 반복을 극대화 하여 생산성을 향상시키는 방법</p>
  </li>
  <li>
    <p>XP의 5가지 핵심 가치 (암기)</p>
    <ul>
      <li>의사소통(Cmmunication)</li>
      <li>단순성(Simplicity)</li>
      <li>용기(Courage)</li>
      <li>존중(Respect)</li>
      <li>피드백(Feedback)</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>용단의피존</p>
</blockquote>

<h2 id="xp-개발-프로세스">xp 개발 프로세스</h2>

<table>
  <thead>
    <tr>
      <th>프로세스</th>
      <th>내용</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>릴리즈 계획 수립<br />(Release Planning)</td>
      <td>부분 혹은 전체 개발 완료 시점에 대한 일정을 수립<br />몇개의 스토리가 적용되어 부분적으로 기능이 완료된 제품을 제공하는 것을 릴리즈라고 함</td>
    </tr>
    <tr>
      <td>이터레이션<br />(Iteration, 주기)</td>
      <td>실제 개발 작업을 진행하는 과정으로, 보통 1~3주 정도의 기간으로 진행됨</td>
    </tr>
    <tr>
      <td>승인 검사<br />(Acceptance Test, 인수 테스트)</td>
      <td>하나의 이터레이션 안에서 부분 완료 제품이 구현되면 수행하는 테스트</td>
    </tr>
    <tr>
      <td>소규모 릴리즈<br />(Small Release)</td>
      <td>요구사항에 유연하게 대응할 수 있도록 릴리즈의 규모를 축소 한 것</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>계획하고 진행한 후 검사하고 출시한다 (진행 -&gt; 이터레이션, 출시 -&gt; 릴리즈)</p>
</blockquote>

<h2 id="xp의-주요-실천-방법practice">xp의 주요 실천 방법(Practice)</h2>

<table>
  <thead>
    <tr>
      <th>실천 방법</th>
      <th>내용</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Pair Programming&lt;div&gt;(짝 프로그래밍)</td>
      <td>다른 사람과 함께 프로그래밍을 수행함으로써 개발에 대한 책임을 공동으로 나눠 갖는 환경을 조성</td>
    </tr>
    <tr>
      <td>Collective Ownership&lt;div&gt;(공동 코드 소유)</td>
      <td>개발 코드에 대한 권한과 책임을 공동으로 소유</td>
    </tr>
    <tr>
      <td>Test-Driven Development&lt;div&gt;(테스트 주도 개발)</td>
      <td>개발자가 실제 코드를 작</td>
    </tr>
    <tr>
      <td>Whole Team&lt;div&gt;(전체 팀)</td>
      <td>개발에 참여하는 모든 구성원(고객 포함)들은 각자 자신의&lt;div&gt;역할이 있고 그 역할에 대한 책임을 가져야 함</td>
    </tr>
    <tr>
      <td>Continuous Integration&lt;div&gt;(계속적인 통합)</td>
      <td>모듈 단위로 나눠서 개발된 코드들은 하나의 작업이 마무리 될 때마다 지속적으로 통합됨</td>
    </tr>
    <tr>
      <td>Refactoring(리팩토링)</td>
      <td>프로그램 기능의 변경 없이 시스템을 재구성함&lt;div&gt;목적 : 프로그램을 쉽게 이해하고 쉽게 수정하여 빠르게 개발할 수 있도록 하기 위함</td>
    </tr>
    <tr>
      <td>Small Release(소규모 릴리즈)</td>
      <td>릴리즈 기간을 짧게 반복함으로써 고객의 요구 변화에 신속히 대응할 수 있음</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>주요 실천 방법은 영문으로도 알고 있어야 함</p>
</blockquote>

<h1 id="4-현행-시스템-파악">4. 현행 시스템 파악</h1>

<table>
  <tr>
    <td>프로세스</td>
    <td>현행 시스템</td>
    <td>내용</td>
  </tr>
  <tr>
    <td rowspan="3">1단계</td>
    <td> 시스템 구성 파악</td>
    <td>조직의 주요 업무를 담당하는 기간 업무와 이를 지원하는 지원 업무로 구분하여 기술</td>
  </tr>
   <tr>
    <td>시스템 기능 파악</td>
    <td>현재 제공하는 기능들을 주요 기능과 하부 기능, 세부 기능으로 구분하여 계층형으로 표시함</td>
  </tr>
  <tr>
    <td>시스템 인터페이스 파악</td>
    <td>단위 업무 시스템 간에 주고받는 데이터의 종류, 형식, 프로토콜, 연계 유형, 주기 등을 명시함</td>
  </tr>
   <tr>
    <td rowspan="2">2단계</td>
    <td>아키텍처 구성 파악</td>
    <td>최상위 수준에서 계층별로 표현한 아키텍처 구성도를 작성함</td>
  </tr>
  <tr>
    <td>소프트웨어 구성 파악</td>
    <td>소프트웨어들의 제품명, 용도, 라이선스 적용 방식, 라이선스 수 등을 명시함</td>
  </tr>
   <tr>
    <td rowspan="2">3단계</td>
    <td>하드웨어 구성 파악</td>
    <td>단위 업무 시스템들이 운용되는 서버의 주요 사양 과 수량, 그리고 서버의 이중화 적용 여부를 명시함</td>
  </tr>
     <tr>
    <td>네트워크 구성 파악</td>
    <td>서버의 위치, 서버 간의 네트워크 연결 방식을 네트워크 구성도로 작성함</td>
  </tr>
</table>

<blockquote>
  <p>시스템의 개발 범위를 명확히 설정하려면 현행 시스텡이 어떻게 구성되어 있는지 파악해야 됨</p>
</blockquote>

<h1 id="5-개발-기술-환경-파악">5. 개발 기술 환경 파악</h1>

<blockquote>
  <p>요구사항 식별 시 고려사항 암기</p>
</blockquote>

<h2 id="개발-기술-환경-파악의-개요">개발 기술 환경 파악의 개요</h2>
<p>개발 하고자 하는 소프트웨어와 관련된 운영체제(OS), 데이터베이스 관리 시스템(DBMS), 미들웨어 등을 선정할 때 고려해야 하 할 사항을 기술하고, 오픈 소스를 사용할 때 주의해야 할 내용을 제시</p>

<h2 id="운영체제os--operating-system">운영체제(OS , Operating System)</h2>

<ul>
  <li>컴퓨터 시스템의 자원을 효율적으로 관리하며, 컴퓨터를 효율적으로 사용할 수 있도록 환경을 제공하는 소프트웨어</li>
  <li>운영체제 관련 요구사항 식별 시 고려사항
    <ul>
      <li>가용성</li>
      <li>성능</li>
      <li>기술 지원</li>
      <li>주변 기기</li>
      <li>구축 비용</li>
    </ul>
  </li>
</ul>

<h2 id="데이터베이스-관리-시스템dbms-database-mangement-system">데이터베이스 관리 시스템(DBMS; DataBase Mangement System)</h2>

<ul>
  <li>
    <p>사용자와 데이터베이스 사이에서 사용자의 요구에 따라 정보를 생성해 주고, 데이터베이스를 관리해 주는 소프트웨어</p>
  </li>
  <li>
    <p>DBMS 관련 요구사항 식별 시 고려사항</p>
    <ul>
      <li>가용성</li>
      <li>성능</li>
      <li>기술 지원</li>
      <li>상호 호환성</li>
      <li>구축 비용</li>
    </ul>
  </li>
</ul>

<h2 id="웹-애플리케이션-서버was-web-application-server">웹 애플리케이션 서버(WAS; Web Application Server)</h2>

<ul>
  <li>
    <p>사용자의 요구에 따라 변하는 동적인 콘텐츠를 처리하기 위해 사용되는 미들웨어</p>
  </li>
  <li>
    <p>웹 애플리케이션 서버 관련 요구사항 식별 시 고려사항
    - 가용성
    - 성능
    - 기술 지원
    - 구축 비용</p>
  </li>
</ul>

<h2 id="오픈-소스-open-source">오픈 소스 (Open Source)</h2>

<ul>
  <li>누구나 별다른 제한 없이 사용할 수 있도록 소스 코드를 공개한 소프트웨어</li>
  <li>웹 애플리케이션 서버 관련 요구사항 식별 시 고려사항
    - 라이선스의 종류
    - 사용자 수
    - 기술의 지속 가능성</li>
</ul>]]></content><author><name>Lee Kyuhwan</name></author><category term="EIP_PS" /><category term="EIP_PS" /></entry><entry><title type="html">1.요구사항 확인 6~10</title><link href="http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B801/" rel="alternate" type="text/html" title="1.요구사항 확인 6~10" /><published>2022-04-08T00:00:00+09:00</published><updated>2022-04-17T00:00:00+09:00</updated><id>http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B801</id><content type="html" xml:base="http://localhost:4000/eip_ps/%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%ED%99%95%EC%9D%B801/"><![CDATA[<h1 id="6-요구사항-정의">6. 요구사항 정의</h1>
<blockquote>
  <p>요구사항의 개념을 정리해 두는것이 좋음</p>
  <h2 id="요구사항">요구사항</h2>
  <ul>
    <li>소프트웨어가 어떤 문제를 해결하기 위해 제공하는 서비스에 대한 설명과 운영되는데 필요한 제약 조건</li>
    <li>요구사항의 유형
      <ul>
        <li>기능 요구사항(Functional requirements)</li>
        <li>비기능 요구사항(Non-functional requirements)</li>
        <li>사용자 요구사항(User requirements)</li>
        <li>시스템 요구사항(System requirements)</li>
      </ul>
    </li>
  </ul>
</blockquote>

<h2 id="기능-요구사항functional-requirements">기능 요구사항(Functional requirements)</h2>

<ul>
  <li>기능이나 수행과 관련된 요구사항</li>
</ul>

<h2 id="비기능-요구사항non-functional-requirements">비기능 요구사항(Non-functional requirements)</h2>

<ul>
  <li>품질이나 제약사항과 관련된 요구사항</li>
</ul>

<h2 id="사용자-요구사항user-requirements">사용자 요구사항(User requirements)</h2>

<ul>
  <li>사용자 관점에서 본 시스템이 제공해야 할 요구사항</li>
</ul>

<h2 id="시스템-요구사항system-requirements">시스템 요구사항(System requirements)</h2>

<ul>
  <li>개발자 관점에서 본 시스템 전체가 제공해야 할 요구사항</li>
</ul>

<h1 id="7-요구사항-개발-프로세스">7. 요구사항 개발 프로세스</h1>

<h2 id="요구사항-개발-프로세스">요구사항 개발 프로세스</h2>
<p>요구사항을 체계적으로 도출하고 분석한 후 명세서에 정리한 다음 확인 및 검증하는 일련의 구조화된 활동</p>

<blockquote>
  <p>도출(Elicitation)  -&gt; 분석(Analysis) -&gt; 명세(Specification) -&gt; 확인(Validation)
도분명확</p>
</blockquote>

<h2 id="요구사항-도출requirement-elicitation-요구사항-수집">요구사항 도출(Requirement Elicitation, 요구사항 수집)</h2>
<ul>
  <li>시스템 개발에 관련된 사람들이 서로 의견을 교환하여 요구사항을 어떻게 수집할 것인지를 식별하고 이해하는 과정</li>
  <li>요구사항을 도출하는 주요 기법
    <ul>
      <li>청취와 인터뷰</li>
      <li>설문</li>
      <li>브레인스토밍</li>
      <li>워크샵</li>
      <li>프로토타이핑</li>
      <li>유스케이스</li>
    </ul>
  </li>
</ul>

<h2 id="요구사항-분석requirement-analysis">요구사항 분석(Requirement Analysis)</h2>
<ul>
  <li>요구사항 중 명확하지 않거나 모호하여 이해되지 않는 부분을 발견하고 이를 걸러내기 위한 과정</li>
  <li>사용되는 대표적인 도구
    <ul>
      <li>자료 흐름도(DFD)</li>
      <li>자료 사전(DD)</li>
    </ul>
  </li>
</ul>

<h2 id="요구사항-명세requirement-specification">요구사항 명세(Requirement Specification)</h2>
<ul>
  <li>분석된 요구사항을 바탕으로 모델을 작성하고 문서화하는 것</li>
</ul>

<h2 id="요구사항-확인requirement-validation-요구사항-검증">요구사항 확인(Requirement Validation, 요구사항 검증</h2>
<ul>
  <li>요구사항 명세서가 정확하고 완전하게 작성되었는지를 검토하는 활동</li>
</ul>

<h2 id="요구공학requirements-engineering">요구공학(Requirements Engineering)</h2>
<ul>
  <li>요구사항을 정의하고, 분석 및 관리하는 프로세스를 연구하는 학문</li>
</ul>

<h2 id="요구사항-명세-기법">요구사항 명세 기법</h2>

<table>
  <tr>
    <td>구분</td>
    <td>정형 명세 기법</td>
    <td>비정형 명세 기법</td>
  </tr>
  
  <tr>
    <td>기법</td>
    <td>수학적 원리 기반, 모델 기반</td>
    <td>상태/ 기능/ 객체 중심</td>
  </tr>
  
  <tr>
    <td>작성 방법</td>
    <td>수학적 기호, 정형화된 표기법</td>
    <td>일반 명사, 동사 등의 자연어를 기반으로 서술 또는 다이어그램으로 작성</td>
  </tr>
  
  <tr>
    <td>특징</td>
    <td>요구사항을 정확하고 간결하게 표현할 수 있음 <br />요구사항에 대한 결과가 작성자에 관계없이 일관성이 있으므로 완전성 검증이 가능함<br />표기법이 어려워 사용자가 이해하기 어려움</td>
    <td>자연어의 사용으로 인해 요구사항에 대한 결과가 작성자에 따라 다를 수 있어 일관성이 떨어지고, 해석이 달라질 수 있음<br />내용의 이해가 쉬어 의사소통이 용이함</td>
  </tr>
  
  <tr>
    <td>종류</td>
    <td>VDM, Z, Petri-net, CSP 등</td>
    <td>FSM, Decision Table, ER모델링, State Chart(SADT) 등</td>
  </tr>
</table>

<h1 id="8-요구사항-분석">8. 요구사항 분석</h1>

<h2 id="요구사항-분석requirement-analysis-1">요구사항 분석(Requirement Analysis)</h2>

<ul>
  <li>개발 대상에 대한 사용자의 요구사항을 이해하고 문서화 하는 활동을 의미</li>
</ul>

<h2 id="구조적-분석-기법">구조적 분석 기법</h2>

<ul>
  <li>
    <p>자료의 흐름과 처리를 중심으로 하는 요구사항 분석 방법</p>
  </li>
  <li>
    <p>주요 구조적 분석 기법 도구 (암기)</p>

    <ul>
      <li>자료 흐름도(DFD)</li>
      <li>자료 사전(DD)</li>
      <li>소단위 명세서(Mini-Spec.)</li>
      <li>개체 관계도(ERD)</li>
      <li>상태 전이도(STD)</li>
      <li>제어 명세서</li>
    </ul>
  </li>
</ul>

<h2 id="자료-흐름드dfd-datea-flow-diagram">자료 흐름드(DFD; Datea Flow Diagram)</h2>

<ul>
  <li>자료의 흐름 및 변환 과정과 기능을 도형 중심으로 기술하는 방법</li>
</ul>

<h2 id="자료-흐름도-기본-기호">자료 흐름도 기본 기호</h2>

<table>
  <tr>
    <td rowspan="2">기호</td>
    <td rowspan="2">의미</td>
    <td colspan="2">표기법</td>
    
  </tr>
  
  <tr>
    <td>Yourdon/ DeMacro</td>
    <td>Gane/ Sarson</td>
  </tr>
  
  <tr>
    <td>프로세스(Process)</td>
    <td>자료를 변환시키는 시스템의 한 부분(처리과정)을 나타내며 처리, 기능, 변환, 버블이라고고도 함</td>
    <td><image src="https://user-images.githubusercontent.com/93482597/163679391-0e88b373-45b8-4440-9db1-7463f5394eb3.png" with="60px" heigh="60px"></image></td>
    <td><image src="https://user-images.githubusercontent.com/93482597/163679419-071103c1-1689-438a-a7c6-f06dae64e368.png" with="60px" heigh="60px"></image>
    </td>
  </tr>
  
  <tr>
    <td>자료 흐름(Data Flow)</td>
    <td>자료의 이동(흐름)이나 연관관계를 나타냄</td>
    <td colspan="2"><image src="https://user-images.githubusercontent.com/93482597/163679476-72c9b1bd-1b99-47bb-ab73-44f273099449.png" with="60px" heigh="60px"></image>
    </td>
  </tr>
  
  <tr>
    <td>자료 저장소(Terminator)</td>
    <td>시스템에서의 자료 저장소(파일, 데이터베이스)를 나타냄</td>
    <td> <image src="https://user-images.githubusercontent.com/93482597/163679530-97939946-a208-465a-99ac-b06690dcc0d6.png" with="60px" heigh="60px"></image>
    </td>
    <td> <image src="https://user-images.githubusercontent.com/93482597/163679663-0d76bec7-32ef-4c88-87ec-71ef3fdba785.png" with="60px" heigh="60px"></image></td>
  </tr>

  <tr>
    <td>단말(Terminator)</td>
    <td>시스템과 교신하는 외부 개체로, 입력 데이터가 만들어지고 출력 데이터를 받음</td>
    <td> <image src="https://user-images.githubusercontent.com/93482597/163679703-8c76a146-91f9-46b7-92df-21139656bfb2.png"></image></td>
    <td> <image src="https://user-images.githubusercontent.com/93482597/163679709-7d3aba52-aefa-4658-a1f8-f2b955e89dd9.png"></image></td>
  </tr>
      </table>

<h2 id="자료-사전dd-data-dictionary">자료 사전(DD; Data Dictionary)</h2>

<ul>
  <li>
    <p>자료의 흐름도에 있는 자료를 정의하고 기록한 것</p>
  </li>
  <li>
    <p>자료 사전에서 사용되는 표기 기호</p>
  </li>
</ul>

<table>

  <tr>
    <td>기호</td>
    <td>의미</td>
  </tr> 
  
  <tr>
    <td>=</td>
    <td> 자료의 정의 : ~로 구성되어 있다(is composed of)</td>
  </tr> 
 
  <tr>
    <td>+</td>
    <td> 자료의 연결 : 그리고(and)</td>
  </tr> 
      
  <tr>
    <td>(  )</td>
    <td> 자료의 생략 : 생략 가능한 자료(Optional)</td>
  </tr> 
      
  <tr>
    <td>[  ]</td>
    <td> 자료의 선택 : 또는(or)</td>
  </tr> 
      
  <tr>
    <td>{  }</td>
    <td> 자료의 반복 : Iteration of <br /> <image src="https://user-images.githubusercontent.com/93482597/163680303-d45b3fb1-f5eb-41d3-8353-345d4c0455be.png " with="60" height="60"> : n번 이상 반복 </image> <br /><image src="https://user-images.githubusercontent.com/93482597/163680300-7fe7ae4c-7719-42b0-b159-d222da00bda5.png" with="60" height="60"> : 최대로 n번 반복 </image> <br /> <image src="https://user-images.githubusercontent.com/93482597/163680299-ce091380-a147-4bf6-8b89-5dce33e1acf8.png" with="60px" height="60px"> </image> : m 이상  n 이하로 반복</td>
  </tr> 
      
<tr>
    <td>"  "</td>
    <td> 자료의 설명 : 주석(Comment)</td>
</tr> 
</table>

<h1 id="9-요구사항-분석case와-hipo">9. 요구사항 분석CASE와 HIPO</h1>

<h2 id="요구사항-분석용-case자동화-도구">요구사항 분석용 CASE(자동화 도구)</h2>

<ul>
  <li>
    <p>요구사항을 자동으로 분석하고, 요구사항 분석 명세서를 기술하도록 개발된 도구</p>
  </li>
  <li>
    <p>대표적인 요구사항 분석용 CASE</p>
  </li>
</ul>

<table>
  <tr>
    <td>SADT</td>
    <td>
      시스템 정의, 소프트웨어 요구사항 분석, 시스템/소프트웨어 설계를 위한 도구 <br />SoftTech 사에서 개발<br />구조적 요구 분석을 하기 위해 블록 다이어그램을 채택한 자동화 도구
    </td>
  </tr>

   <tr>
    <td>SREM = RSL/REVS</td>
    <td>TRW 사가 실시간 처리 소프트웨어 시스템에서 요구사항을 명확히 기술하도록 할 목적으로 개발한 도구<br />RSL과 REVS를 사용하는 자동화 도구</td>
  </tr>

   <tr>
    <td>PSL/PSA</td>
    <td>PSL과 PSA를 사용하는 자동화 도구<br />미시간 대학에서 개발</td>
  </tr>

   <tr>
    <td>TAGS</td>
    <td>시스템 공학 방법 응용에 대한 자동 접근 방법<br />개발 주기의 전 과정에 이용할 수 있는 자동화 도구</td>
  </tr>
</table>

<blockquote>
  <p>도구의 종류와 각각의 의미를 정확하게 암기 (SSPPT)</p>
</blockquote>

<h2 id="hipohierarchy-input-process-output">HIPO(Hierarchy Input Process Output)</h2>

<ul>
  <li>
    <p>시스템 실행 과정인 입력, 처리, 출력의 기능을 표현한 것</p>
  </li>
  <li>
    <p>하향식 소프트웨어 개발을 위한 문서화 도구</p>
  </li>
</ul>

<h1 id="10-umlunified-modeling-language의-개요">10. UML(Unified Modeling Language)의 개요</h1>

<h2 id="umlunified-modeling-language">UML(Unified Modeling Language)</h2>
<p>시스템 개발 과정에서 의사소통이 원활하게 이루어지도록 표준화한 대표적인 객체지향 모델링 언어이다.</p>

<ul>
  <li>UML의 구성요소
    <ul>
      <li>사물(Things)</li>
      <li>관계(Relationships)</li>
      <li>다이어그램(Diagram)</li>
    </ul>
  </li>
</ul>

<h2 id="사물-things">사물 (Things)</h2>

<ul>
  <li>
    <p>다이어그램 안에서 형성될 수 있는 대상들</p>
  </li>
  <li>
    <p>사물의 종류</p>
  </li>
</ul>
<table>
  <tr>
    <td>사물</td>
    <td>내용</td>
  </tr>

  <tr>
    <td>구조 사물<br />(Structural Things)</td>
    <td>시스템의 개념적, 물리적 요소를 표현<br />클래스(Class), 유스케이스(Use Case), 컴포넌트(Component), 노드(Node) 등</td>
  </tr>

  <tr>
    <td>행동 사물<br />(Behavioral Things)</td>
    <td>시간과 공간에 따른 요소들의 행위를 표현<br />상호작용(Interaction), 상태 머신(State Machine)등</td>
  </tr>

  <tr>
    <td>그룹 사물<br />(Grouping Things)</td>
    <td>요소들을 그룹으로 묶어서 표현<br />패키지(Package)</td>
  </tr>

  <tr>
    <td>주해 사물<br />(Annotation Things)</td>
    <td>부가적인 설명이나 제약조건 등을 표현<br />노트(Note)</td>
  </tr>

</table>]]></content><author><name>Lee Kyuhwan</name></author><category term="EIP_PS" /><category term="EIP_PS" /></entry></feed>